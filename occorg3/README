SUMMARY

The guide scripts lead through the source files to create an occam 2.0
"compiler" (really syntax checker only), demonstrate it on standard test
files, then break down its syntax so as to prove the descent structure
and how for the most advanced syntax description (occlang7) the descent
equivalence classes are all singletons except for two. Using a very simple
and intuitive extended descent definition, those two equivalence classes
also break up into singletons. Thus, using this syntax and descent
structure, occam 2.0 syntactic objects are non-recursive and self-recursive,
but never cycle-recursive.

To summarize the results (in occlang7 whose standard descent is essentially
same as occlang6 and extended descent is better):
(a) Standard descent (defined by syntactic objects being part of definition
of other syntactic objects), levels 0 through 12, of which all are composed
of singletons except 3, which is one equivalence class including expression
and operand, and 10, which is one equivalence class including process;
(b) Extended descent based on enclosure count (parentheses plus square
brackets), all singletons in 3;
(c) Extended descent based on indentation count, all singletons in 10.

In both (b) and (c), each extended descent definition goes only one level
deeper and only to other syntactic object(s) of the same standard level, so
one special case (leaf) is analyzed for each, and is also all singletons.

PREPARATION

Use a bash terminal window for the operations below. For pdf files, use a
standard pdf viewer.

The confirmation scripts can be run either in Linux bash or in Mac BSD bash.
For either, they need the tools flex and bison (which are the open-source
version of lex and yacc; I will use the names interchangeably). These in
turn need gcc.

Linux

Use a standard installation tool such as apt-get to install flex and bison.

Mac

Attempt to run gcc, for example:

gcc -help

If you get a warning that Xcode was needed, say yes to its install;

get Homebrew according to a ruby script found on the Internet:

/usr/bin/ruby -e "$(curl -fsSL
https://raw.githubusercontent.com/Homebrew/install/master/install)"

brew flex

brew bison

SCRIPTS

After unpacking, the scripts to run (in the order shown) are in the target
directory tree of the unpack:

./doall
S/lsresult
S/checkall
S/mkocclib
S/chkhis

Of these, doall, lsresult, and mkocclib add files to the target directory
tree, and checkall and chkhis do not (thus are "nilpotent" and can be run
repeatedly).

Many of these scripts have pauses, and progress after an Enter is hit.
For some cases, a second bash terminal window can be opened, and appropriate
actions like checking a file can be carried out in that window while the
first is paused. If a copy of the output is needed, piping to tee is
possible, such as:

S/chkhis | tee chkhis.out

Note that this distorts the user experience somewhat, deactivating some
pauses (the ones generated by | more) and generating output missing line
breaks after pauses. Thus, it may make sense to blast through it the first
time with the tee, print the resulting output, and then carry through it
again with two screens, this time examining files and even running scripts
of your own.

DETAILS

./doall

It generates the check files for the modified Kroc/INMOS occam test files
(received as occam 2.5, must be reduced to occam 2.0). Then (2 steps) for
occlang6 and occlang7, it compiles the syntax checker and applies it to
all test files. (Ignore C compiler warning in Mac.) Then (2 steps) it checks
the results of all the syntax checks: ENDFILE means success. There is 1
error (cgtesb07) in occlang7 and 3 errors (simplb, cgtesb07, cgtesa19) in
occlang6.

Here, cgtesb07 is because of a deliberate error in the source, and simplb
and cgtesa19 are because of zero-indent prologue definitions not allowed
by standard INMOS BNF, though allowed by INMOS occam compilers.

Now (2 steps) the descent tracing is done for occlang6 and occlang7. It
seems to hang at string_head but is actually very busy, and it seems in an
endless loop of DESCENDANT stuff but is actually progressing through an
n-squared algorithm. (The complaint about des9/total at the end is
immaterial.)

Analysis (2 steps) gives the 13 standard descent levels for occlang6 and
occlang7, of which all the increments are of singletons except 3 and 10,
each of which is incremented by one equivalence class.

For occlang7 only (4 steps), both the above paragraphs are done for
extended descent, enclosure levels (level 3), indentation levels (level 10),
enclosure leaf levels (level 3), and indentation leaf levels (level 10).
All break down completely into singletons. The way this is done is to take
the restricted set of the given level, rename enclosed or indented entities
so that they look like keywords to the descent checker (I just add 1 to each
name), then run the standard descent programming. That is equivalent to
actual extended descent on a finite file (unfolding cycles into spirals).

S/lsresult

Files are generated for all of the above work in occlang7, summarizing the
results in easy to examine fashion: five alldefs.txt files, five
occlang7*-levels.txt files, five occlang7*-recurse.txt files,
occlang7-recurse-not-3-10.txt, and occlang7-recurse-3-10.txt.

Each alldefs.txt file shows all syntactic definitions, each on a separate
line, instead of piped (|) together as in usual BNF. The inner ones are
restricted to the special case of extended descent and extended leaf
descent.

Each occlang7*-levels.txt file separates out the entities by actual level.
Each occlang7*-recurse.txt files shows syntactic definitions that recurse.
The other two break the ordinary descent recursion definitions up according
as they are in levels 3 or 10, or not in those levels.

S/checkall

This script generates commentary in many steps. In subdirectory diffs,
results of compares are available for the examiner to check as the
commentary suggests. Because the work was done with the DOS fold editor
origami.exe, the bash scripts (whose activity is clear) get part way from
the Kroc/INMOS test file originals in sources (but originally in Kroc/INMOS
with 1995 dates, as the version control markers say) to the files actually
used in cgtests. The rest must be checked by hand with diffs. A specific
guide, and usually a specific diff file, is given for each case.

Toward the end, occlangn-CRInl.dif, occlangp-CRInl.dif, and
occleafn-CRInl.dif show the changes made to do the extended descent for
both occlangn (level 3) and occlangp (level 10), and the leaf for level 3,
occleafn. occleafp-CRI0anl.dif through occleafp-CRInl.dif show a sequence
of changes required to do the extended descent for the indentation
(level 10) leaf. In these, the first step is to remove all syntax
definitions that include an indentation (since they cannot happen in a
leaf), then remove any syntactic object with no definition or with only
an infinite regress, e.g. something like

valof = specification
        valof

only. This repeats, removing definitions involving syntactic objects that
were removed, until convergence (guaranteed because of finite set).

S/mkocclib

This is a confidence test succeeding with a five-member classic occam
library (times.occ), using source files times.occ (Feb 28,1991) and
hostio.inc (Oct 19,1990) without change, except that the contents of
hostio.inc is actually inserted where the #INCLUDE says. It displays the
last ten lines of the syntax checker output, which can easily be related to
the end code of the source file.

S/chkhis

This goes step by step from oc20refman.pdf, a copy of the occam 2.0 INMOS
reference manual, to the lex/yacc source OCCAMLIB.L and OCCAMLIB.Y used in
occlang4. (The steps through occlang5, occlang6, and occlang7 are
comparatively simple, described in the paper, and checkable using diffs.)
It essentially follows the description found in Details-occam-parse.pdf,
except it pauses and usually provides diffs. There are a few places where
major organizational changes are left to the examiner, but they do not
change the semantic impact of the syntax.

The end result of this, if followed exhaustively, is that the correctness
of the syntax of occlang7 can be traced deductively through these changes,
as well as inductively through the Kroc/OCCAM tests.
