-- version control marker $Id: cgtest23.occ,v 1.4 1995/10/10 12:58:36 djb1 Exp $
#OPTION "AN"
-- Usage and Alias checking turned off
PROC cgtest23 (CHAN OF BYTE keyb, scr, err)
  --{{{  cgmain.occ
  -- version control marker $Id: cgmain.occ,v 3.9 1997/03/06 16:36:15 dcw Exp $
  --{{{  cglib.occ
  -- version control marker $Id: cglib.occ,v 1.6 1997/01/30 12:31:09 dcw Exp $
  --
  -- Cut-down version of the output utilities from the course library
  --{{{  some constants
  VAL BYTE BELL IS 7(BYTE):
  VAL BYTE NULL IS 0(BYTE):
  VAL BYTE BACK IS 8(BYTE):
  VAL BYTE DELETE IS 127(BYTE):
  --}}}
  --{{{  out stuff
  PROC out.repeat (VAL BYTE ch,  VAL INT n,  CHAN OF BYTE out)
    --{{{
    IF
      n > 0
        SEQ i = 0 FOR n
          SEQ
            out ! ch
      TRUE
        SKIP
    --}}}
  :
  PROC out.ch (VAL BYTE ch,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    SEQ
      out.repeat (' ', field - 1, out)
      out ! ch
    --}}}
  :
  PROC out.ch.funny (VAL BYTE ch,  VAL INT field,  CHAN OF [1]BYTE out)
    --{{{
    SEQ
      VAL [1]BYTE thing RETYPES ch:
      out ! thing
    --}}}
  :
  PROC out.nl (CHAN OF BYTE out)
    SEQ
      out ! '*c'
      out ! '*n'
  :
  PROC in.ch (BYTE ch, CHAN OF BYTE in)
    --{{{
    in ? ch
    --}}}
  :
  PROC out.bell (CHAN OF BYTE out)
    --{{{
    out.ch (BELL, 1, out)
    --}}}
  :
  PROC out.string (VAL []BYTE s,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    VAL length IS SIZE s:
    SEQ
      out.repeat (' ', field - length, out)
      SEQ i = 0 FOR length
        SEQ
          out ! s [i]
    --}}}
  :
  PROC out.number (VAL INT n,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    VAL max.digits IS 20:
    [max.digits]INT D:
    INT x, i:
    IF
      (n = 0)
        --{{{  zero
        SEQ
          IF
            (1 < field)
              out.repeat (' ', field - 1, out)
            (TRUE)
              SKIP
          out ! '0'
        --}}}
      (TRUE)
        SEQ
          i := 0     --  bring this line up here,   Vedat
          --{{{  check negative
          IF
            (n < 0)
              SEQ        -- this one can handle MOSTNEG INT as well
                D [i] := -(n\10)
                x := -(n/10)
                i:= i + 1
            (TRUE)         -- (n > 0)
              x := n
          --}}}
          --{{{  decompose
          -- i := 0   -- this line goes up in order to handle MOSTNEG INT
          WHILE x > 0
            SEQ
              D [i] := x\10
              x := x/10
              i := i + 1
          --}}}
          --{{{  pad
          IF
            (n > 0)
              out.repeat (' ', field - i, out)
            (TRUE)
              SEQ
                out.repeat (' ', (field - 1) - i, out)
                out ! '-'
          --}}}
          --{{{  output
          WHILE i > 0
            SEQ
              i := i - 1
              out ! BYTE (D [i] + (INT '0'))
          --}}}
    --}}}
  :
  PROC out.bool (VAL BOOL b,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    IF
      (b = TRUE)
        out.ch ('1', field, out)
      (b = FALSE)
        out.ch ('0', field, out)
      (TRUE)
        out.ch ('.', field, out)
    --}}}
  :
  PROC out.yes.no (VAL BOOL b,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    IF
      b
        out.string ("yes", field, out)
      TRUE
        out.string ("no", field, out)
    --}}}
  :
  PROC out.hex.int (VAL INT x, l, CHAN OF BYTE out)
    --{{{  body of cg.write.hex.int
    -- this procedure ignores the field length parameter 'l'
    -- independent of endianism - DCW
    VAL INT nibble          IS #F:
    VAL INT hex.dig.per.int IS 8:
    VAL INT bit.per.hex.dig IS 4:
    VAL hex.dig             IS "0123456789ABCDEF":
    INT digit, mask, shift:
    [12]BYTE s:
    SEQ
      s[0]:= '#'
      SEQ i = 1 FOR hex.dig.per.int
        SEQ
          shift :=  (hex.dig.per.int - i) * bit.per.hex.dig
          digit := (x >> shift) /\ nibble
          s[i]:= hex.dig[digit]
      out.string ([s FROM 0 FOR (hex.dig.per.int + 1)], 0, out)
    --}}}
  :
  PROC black.hole (CHAN OF BYTE in)
    --{{{
    WHILE TRUE
      BYTE any:
      in ? any
    --}}}
  :
  --}}}
  --}}}
  VAL display.names  IS TRUE :
  --VAL display.names  IS TRUE :
  --VAL display.titles IS display.names :
  VAL display.titles IS TRUE :
  VAL no.of.columns   IS 6 :
  VAL width.of.column IS 10 :
  TIMER timer:                    -- DCW
  INT start.time, end.time:       -- DCW
  INT column.count :
  --{{{  [INLINE] PROC out (VAL INT ch)
  PROC out (VAL INT ch)
    SEQ
      IF
        (ch >= 0) AND (ch < 256)
          scr ! BYTE ch
        TRUE
          SKIP
  :
  --}}}
  --{{{  PROC newline ()
  PROC newline ()
    SEQ
      out.nl (scr)
      column.count := 0
  :
  --}}}
  --{{{  PROC writes (VAL []BYTE s)
  PROC writes (VAL []BYTE s)
    out.string (s, 0, scr)
  :
  --}}}
  --{{{  [INLINE] PROC in (INT ch)
  PROC in (INT ch)
    --all input goes via this proc, but its only ever used to wait
    SEQ
      --newline ()
      --writes ("(Press any key) ")
      -- keyboard ? ch
      ch := ch  -- stop any warning not used
      newline ()
  :
  --}}}
  --{{{  [INLINE] PROC writen (VAL INT n)
  PROC writen (VAL INT n)
    out.number (n, 0, scr)
  :
  --}}}
  --{{{  [INLINE] PROC writehex (VAL INT value, length)
  PROC writehex (VAL INT value, length)
    --VAL hex IS "0123456789ABCDEF" :
    --SEQ
    --  SEQ i = 1 FOR length
    --    out (INT hex [(value >> ((length - i) * 4)) /\ #F] )
    --  out (-2)
    out.hex.int (value, length, scr)
  :
  --}}}
  --{{{  [INLINE] PROC beep ()
  PROC beep ()
    out (7)
  :
  --}}}
  --{{{  PROC failed.test  (VAL []BYTE where)
  PROC failed.test(VAL []BYTE where)
    SEQ
      beep()
      writes(where)
      IF
        display.names
          newline()
        TRUE
          SKIP
      writes (" Failed: ")
  :
  --}}}
  --{{{  PROC completed.ok (VAL []BYTE where)
  INT error.count, passed.count:
  PROC completed.ok (VAL []BYTE where)
    SEQ
      passed.count := passed.count + 1
      IF
        display.names
          SEQ
            writes (where)
            IF
              column.count < no.of.columns
                VAL spaces IS "            " :
                VAL INT n.spaces IS width.of.column - (SIZE where):
                SEQ
                  IF
                    n.spaces > 0
                      writes([spaces FROM 0 FOR width.of.column - (SIZE where)])
                      --SEQ i = 0 FOR width.of.column - (SIZE where)
                      --  out ('*s' (INT))
                    TRUE
                      out ('*s' (INT))
                  column.count := column.count + 1
              TRUE
                newline ()
        TRUE
          SKIP
  :
  --}}}
  INT any.integer.name :
  VAL []BYTE useless.name RETYPES any.integer.name :
  VAL nibbles.per.INT IS (SIZE useless.name) * 2 :
  --{{{  PROC check.BOOL (VAL BOOL val1, val2, VAL []BYTE test.type)
  PROC check.BOOL (VAL BOOL val1, val2, VAL []BYTE test.type)
    INT key :
    PROC writebool (VAL BOOL b)
      IF
        b
          writes ("TRUE")
        TRUE
          writes ("FALSE")
    :
    SEQ
      IF
        val1 = val2
          completed.ok (test.type)
        TRUE
          SEQ
            failed.test(test.type)
            writebool (val1)
            writes ("  ")
            writebool (val2)
            in (key)
            error.count := error.count + 1
  :
  --}}}
  --{{{  PROC check.BYTE (VAL BYTE val1, val2, VAL []BYTE test.type)
  PROC check.BYTE (VAL BYTE val1, val2, VAL []BYTE test.type)
    INT key :
    SEQ
      IF
        val1 = val2
          completed.ok (test.type)
        TRUE
          SEQ
            failed.test(test.type)
            writehex (INT val1, 2)
            writes ("  ")
            writehex (INT val2, 2)
            in (key)
            error.count := error.count + 1
  :
  --}}}
  --{{{  PROC check.INT (VAL INT val1, val2, VAL []BYTE test.type)
  PROC check.INT (VAL INT val1, val2, VAL []BYTE test.type)
    INT key :
    SEQ
      IF
        val1 = val2
          completed.ok (test.type)
        TRUE
          SEQ
            failed.test(test.type)
            writehex (val1, nibbles.per.INT)
            writes ("  ")
            writehex (val2, nibbles.per.INT)
            writes ("  ")
            writen (val1)
            writes ("  ")
            writen (val2)
            in (key)
            error.count := error.count + 1
  :
  --}}}
  --{{{  PROC check (VAL INT val1, val2, VAL []BYTE test.type)
  --INLINE PROC check (VAL INT val1, val2, VAL []BYTE test.type)
  -- If this is inline, every invocation creates an abbreviation
  -- VAL test.type IS "..." :
  -- and this makes the map file huge!
  PROC check (VAL INT val1, val2, VAL []BYTE test.type)
    check.INT (val1, val2, test.type)
    --{{{  COMMENT
    --IF
      --val1 = val2
        --check.INT (val1, val2, test.type)
      --TRUE
        --out.string ("!!! FAILED in check !!!*n*c", 0, out)
    --}}}
  :
  --}}}
  --{{{  PROC init (VAL []BYTE name, description)
  [20]BYTE saved.name :
  INT saved.name.len :
  PROC init (VAL []BYTE name, description)
    SEQ
      timer ? start.time          -- DCW
      writes (name)
      writes ("  --  ")
      writes (description)
      newline ()
      error.count := 0
      passed.count := 0
      saved.name.len := SIZE name
      [saved.name FROM 0 FOR saved.name.len] := name
  :
  --}}}
  --{{{  PROC title (VAL []BYTE string)
  PROC title (VAL []BYTE string)
    IF
      display.titles
        SEQ
          IF
            display.names
              newline ()
            TRUE
              SKIP
            TRUE
              STOP
          writes(string)
          newline()
      TRUE
        SKIP
      TRUE
        STOP
  :
  --}}}
  --{{{  PROC finish ()
  PROC finish ()
    SEQ
      IF
        display.names
          newline ()
        TRUE
          SKIP
      IF
        error.count > 0
          SEQ
            writes ("^^^ Failed : ")
            writes ([saved.name FROM 0 FOR saved.name.len])
            writes (": ")
            writen (error.count)
            writes (" errors detected, ")
        TRUE
          SEQ
            writes ("^^^ Passed : ")
            writes ([saved.name FROM 0 FOR saved.name.len])
            writes (": All ")
      writen (passed.count)
      writes (" tests passed OK")
      timer ? end.time            -- DCW
      newline ()
      writes ("Time = ")
      writen (end.time - start.time)
      writes (" ticks")
      newline ()
  :
  --}}}
  --{{{  identity functions
  -- These are designed to help stop the optimiser constant propagating.
  -- If it manages to defeat these, make them more complex, as long as they
  -- still return the identity function.
  BOOL   FUNCTION id.BOOL   (VAL BOOL   x)
    BOOL res :
    VALOF
      res := x
      RESULT res
  :
  BYTE   FUNCTION id.BYTE   (VAL BYTE   x)
    BYTE   res :
    VALOF
      res := x
      RESULT res
  :
  INT    FUNCTION id.INT    (VAL INT    x)
    INT    res :
    VALOF
      res := x
      RESULT res
  :
  INT16  FUNCTION id.INT16  (VAL INT16  x)
    INT16  res :
    VALOF
      res := x
      RESULT res
  :
  INT32  FUNCTION id.INT32  (VAL INT32  x)
    INT32  res :
    VALOF
      res := x
      RESULT res
  :
  INT64  FUNCTION id.INT64  (VAL INT64  x)
    INT64  res :
    VALOF
      res := x
      RESULT res
  :
  REAL32 FUNCTION id.REAL32 (VAL REAL32 x)
    REAL32 res :
    VALOF
      res := x
      RESULT res
  :
  REAL64 FUNCTION id.REAL64 (VAL REAL64 x)
    REAL64 res :
    VALOF
      res := x
      RESULT res
  :
  INT    FUNCTION id        (VAL INT    x)
    INT    res :
    VALOF
      res := x
      RESULT res
  :
  --}}}
  --}}}
  SEQ
    init ("CG test 23", "Alias and Usage checking disabled")
    --{{{  tests from cgtest3
    PROC abbreviations()
      SEQ
        --{{{  simple abbreviations           (A000 - A099)
        --{{{  output message
        title ("Simple abbreviations")
        --}}}
        SEQ
          --{{{  other abbreviations          (A010 - A019)
          INT z :
          --#PRAGMA PERMITALIASES z
          SEQ
            z := 42
            c IS z :
            SEQ
              z := 175
              check (c, 175, "A017")
              check (z, 175, "A018")
          --}}}
          --{{{  nested abbreviations         (A020 - A039)
          INT x, y, z, a :
          --#PRAGMA PERMITALIASES x, y
          SEQ
            x := 42
            a := 99
            a IS x :
            SEQ
              check (a, 42, "A021")
              y := 54
              a IS y :
              b IS y :
              SEQ
                check (a, 54, "A022")
                b := b + 1
                check (b, 55, "A023")
                check (a, 55, "A024")
                z := 10
                b IS z :
                check (b, 10, "A025")
                check (b, 55, "A026")
                a IS a :
                check (a, 55, "A027")
              check (a, 42, "A028")
              check (x, 42, "A029")
            check (a, 99, "A030")
            check (x, 42, "A031")
          --}}}
          --{{{  abbreviations before WHILE   (A040 - A049)
          INT x :
          --#PRAGMA PERMITALIASES x
          SEQ
            x := 2
            y IS x :
            WHILE x > 0
              IF
                x = 2
                  x := 1
                x = 1
                  SEQ
                    x := 0
                    check (y, 0, "A041")
          --}}}
        --}}}
        --{{{  channel abbreviations          (A300 - A399)
        --{{{  output message
        title ("Channel abbreviations")
        --}}}
        CHAN OF INT c :
        [10] CHAN OF INT cs :
        INT x, y :
        SEQ
          --{{{  A306
          d IS cs [3] :
          --#PRAGMA PERMITALIASES cs
          PAR
            cs [3] ! 12
            ALT
              ALT i = 0 FOR 10
                (i <> 3) & cs [i] ? y
                  check (y, -y, "A306")
              d ? x
                check (x, 12, "A306")
          --}}}
        --}}}
    :
    abbreviations()
    --}}}
    --{{{  tests from cgtest9
    PROC arrays()
      SEQ
        --{{{  abbreviated arrays              (A100 - A110)
        --{{{  output message
        title ("Abbreviated arrays")
        --}}}
        --{{{  A100 to A103
        [10] INT a :
        --#PRAGMA PERMITALIASES a
        z IS a :
        INT x :
        SEQ
          SEQ i = 0 FOR 10
            a [i] := i
          SEQ i = 0 FOR 10
            IF
              a [i] = z [i]
                check (i, i, "A100")
              TRUE
                check (-1, i, "A101")
          x := 4
          check (z[x], a[x], "A102")
          check (z[x], 4,    "A103")
        --}}}
        --{{{  A110
        VAL test IS ["hello","every","blurb"] :
        [3] [5] BYTE a :
        --#PRAGMA PERMITALIASES a
        b IS a [2] :
        SEQ
          a := test
          SEQ i = 0 FOR 5
            check (INT b [i], INT "blurb" [i], "A110")
        --}}}
        --}}}
        --{{{  testing SIZE                    (A600 - A701)
        --{{{  output message
        title ("SIZE operator")
        --}}}
        --{{{  proc test.size (of an []INT array)
        PROC test.size (VAL []INT a, VAL INT size, VAL []BYTE string)
          check (SIZE a, size, string)
        :
        --}}}
        SEQ
          --{{{  integer arrays
          [10] INT a :
          --#PRAGMA PERMITALIASES a
          b IS a :
          [15] [6] INT c :
          d IS c [4] :
          SEQ
            check (SIZE a, 10, "A631")
            check (SIZE b, 10, "A632")
            check (SIZE c, 15, "A633")
            check (SIZE d, 6, "A634")
            test.size (a, 10, "A635")
            test.size (b, 10, "A636")
            test.size (c[0], 6, "A637")
            test.size (d, 6, "A638")
          --}}}
          --{{{  byte arrays
          [5] BYTE a :
          [5] [3] BYTE b :
          --#PRAGMA PERMITALIASES a, b
          c IS b :
          d IS a :
          e IS b [2] :
          SEQ
            check (SIZE a, 5, "A641")
            check (SIZE b, 5, "A642")
            check (SIZE c, 5, "A643")
            check (SIZE d, 5, "A644")
            check (SIZE e, 3, "A645")
            a := "howdy"
            check (SIZE a, 5, "A646")
            check (SIZE d, 5, "A647")
          --}}}
        --}}}
        --{{{  strings                         (A800 - A899)
        --{{{  output message
        title ("String handling")
        --}}}
        --{{{  check subscript access          (A800 - A819)
        INT x , y :
        VAL z IS 3 :
        VAL word IS "antidisestablishmentarianism" :
        [7] BYTE message :
        --#PRAGMA PERMITALIASES message
        message2 IS message :
        SEQ
          check (INT "help" [2], INT 'l', "A800")
          check (INT word [2], INT 't', "A801")
          check (INT "help" [z], INT 'p', "A802")
          check (INT word [z], INT 'i', "A803")
          x := 2
          check (INT "help" [x], INT 'l', "A804")
          check (INT word [x], INT 't', "A805")
          message := "blurble"
          check (INT message [3], INT 'r', "A806")
          check (INT message2 [3], INT 'r', "A807")
          check (INT message [z], INT 'r', "A808")
          check (INT message2 [z], INT 'r', "A809")
          check (INT message [x], INT 'u', "A810")
          check (INT message2 [x], INT 'u', "A811")
        --}}}
        --}}}
        --{{{  bug 1563
        -- Note that this test isn't concerned with array handling, but it does
        -- need to be compiled with alias checking disabled, so it has been put here
        --
        PROC bug.1563()
          SEQ
            INT32, INT32 FUNCTION swap.INT32s(VAL INT32 a, b) IS b, a :
            PROC swap.PROC1(INT32 res1, res2, VAL INT32 in1, in2)
              --#PRAGMA PERMITALIASES res1, res2, in1, in2
              -- NOTE that in this example, res1 and res2 are aliased with in1, and in2
              -- ON PURPOSE!
              res1, res2 := swap.INT32s(in1, in2)
            :
            INT32 a, b :
            --#PRAGMA PERMITALIASES a, b
            SEQ
              a, b := -1(INT32), 0(INT32)
              swap.PROC1(a, b, a, b)
              --ASSERT(a =   0(INT32) )
              --ASSERT(b = (-1(INT32)))
              check(INT a,  0, "B1563a")
              check(INT b, -1, "B1563b")
            INT64, INT64 FUNCTION swap.INT64s(VAL INT64 a, b) IS b, a :
            PROC swap.PROC1(INT64 res1, res2, VAL INT64 in1, in2)
              --#PRAGMA PERMITALIASES res1, res2, in1, in2
              -- NOTE that in this example, res1 and res2 are aliased with in1, and in2
              -- ON PURPOSE!
              res1, res2 := swap.INT64s(in1, in2)
            :
            INT64 a, b :
            --#PRAGMA PERMITALIASES a, b
            SEQ
              a, b := -1(INT64), 0(INT64)
              swap.PROC1(a, b, a, b)
              --ASSERT(a =   0(INT64) )
              --ASSERT(b = (-1(INT64)))
              check(INT a,  0, "B1563c")
              check(INT b, -1, "B1563d")
        :
        bug.1563()
        --}}}
    :
    arrays()
    --}}}
    --{{{  tests from cgtest17
    PROC misc()
      --{{{  Static link tests      SL2 - SL4
      PROC static.link()
        SEQ
          title("Static link tests")
          --{{{  SL2
          PROC P ()
            [4]INT a :
            --#PRAGMA SHARED a
            PROC Q (VAL INT i)
              a[i] := 1
            :
            SEQ
              SEQ i = 0 FOR 4
                a[i] := 0
              PAR
                SKIP
                PAR i = 0 FOR 4
                  -- Static link passed to Q needs normalising, so that it points
                  -- to P's normalised workspace
                  Q(i)
              SEQ i = 0 FOR 4
                check(a[i], 1, "SL2")
          :
          SEQ
            P()
          --}}}
          --{{{  SL3
          PROC P ()
            [4]INT a :
            --#PRAGMA SHARED a
            SEQ
              SEQ i = 0 FOR 4
                a[i] := 0
              PAR
                SKIP
                PROC Q (VAL INT i)
                  a[i] := 1
                :
                PAR i = 0 FOR 4
                  -- Static link passed to Q needs normalising, so that it points
                  -- to P's normalised workspace
                  Q(i)
              SEQ i = 0 FOR 4
                check(a[i], 1, "SL3")
          :
          SEQ
            P()
          --}}}
          --{{{  SL4
          [4]INT a :
          --#PRAGMA SHARED a
          PROC Q (VAL INT i)
            a[i] := 1
          :
          PROC P ()
            SEQ
              SEQ i = 0 FOR 4
                a[i] := 0
              PAR
                SKIP
                PAR i = 0 FOR 4
                  -- Static link passed to Q should be static link passed to P
                  Q(i)
              SEQ i = 0 FOR 4
                check(a[i], 1, "SL4")
          :
          SEQ
            P()
          --}}}
      :
      static.link()
      --}}}
    :
    misc()
    --}}}
    --{{{  bug TS/2024
    PROC bug.TS.2024()
      INT64 FUNCTION strange64()
        INT64 result :
        VALOF
          result := 99(INT64)
          RESULT result
      :
      INT32 FUNCTION strange32()
        INT32 result :
        VALOF
          result := 99(INT32)
          RESULT result
      :
      INT32 int32 :
      INT64 int64 :
      SEQ
        int32 := strange32()
        check(INT int32, 99, "B2024A")
        int64 := strange64()
        check(INT int64, 99, "B2024B")
    :
    bug.TS.2024()
    --}}}
    --{{{  bug INSdi02414
    PROC bug.INSdi02414()
      SEQ
        --{{{  basic test, REAL64
        PROC test1 (REAL64 verf, VAL INT32 running.time)
          VAL real.run IS REAL64 ROUND running.time:
          --#PRAGMA PERMITALIASES real.run
          verf := real.run
        :
        INT32 running.time :
        REAL64 verf :
        SEQ
          running.time := id.INT32(99(INT32))
          test1(verf, running.time)
          check(INT ROUND verf, 99, "di02414a")
        --}}}
        --{{{  basic test, REAL32
        PROC test1 (REAL32 verf, VAL INT32 running.time)
          VAL real.run IS REAL32 ROUND running.time:
          --#PRAGMA PERMITALIASES real.run
          verf := real.run
        :
        INT32 running.time :
        REAL32 verf :
        SEQ
          running.time := id.INT32(99(INT32))
          test1(verf, running.time)
          check(INT ROUND verf, 99, "di02414b")
        --}}}
        --{{{  user test, REAL64
        PROC test1 (REAL64 verf, VAL INT32 running.time)
          REAL64 FUNCTION f(VAL INT32 x) IS REAL64 ROUND (x+1(INT32)) :
          VAL real.run IS f(running.time):
          --#PRAGMA PERMITALIASES real.run
          verf := real.run
        :
        INT32 running.time :
        REAL64 verf :
        SEQ
          running.time := id.INT32(99(INT32))
          test1(verf, running.time)
          check(INT ROUND verf, 100, "di02414c")
        --}}}
        --{{{  user test, REAL32
        PROC test1 (REAL32 verf, VAL INT32 running.time)
          REAL32 FUNCTION f(VAL INT32 x) IS REAL32 ROUND (x+1(INT32)) :
          VAL real.run IS f(running.time):
          --#PRAGMA PERMITALIASES real.run
          verf := real.run
        :
        INT32 running.time :
        REAL32 verf :
        SEQ
          running.time := id.INT32(99(INT32))
          test1(verf, running.time)
          check(INT ROUND verf, 100, "di02414d")
        --}}}
    :
    bug.INSdi02414()
    --}}}
    --{{{  bug INSdi03389
    PROC bug.INSdi03389()
      SEQ
        --{{{  INT32 version
        INT32 FUNCTION get.address (VAL INT socket)
          VALOF
            SKIP
            RESULT (INT32 socket) * 4 (INT32)
        :
        PROC set.address ( [24]INT32 header, VAL INT32 addr )
          SEQ
            header[INT header[1]] := addr + 5 (INT32)
        :
        [24]INT32 header:
        SEQ
          SEQ i = 0 FOR SIZE header
            header[i] := id.INT32(INT32 i)
          set.address(header, get.address(300))
          check(INT header[1], 1205, "di03389a")
        --}}}
        --{{{  INT64 version
        INT64 FUNCTION get.address (VAL INT socket)
          VALOF
            SKIP
            RESULT (INT64 socket) * 4 (INT64)
        :
        PROC set.address ( [24]INT64 header, VAL INT64 addr )
          SEQ
            header[INT header[1]] := addr + 5 (INT64)
        :
        [24]INT64 header:
        SEQ
          SEQ i = 0 FOR SIZE header
            header[i] := id.INT64(INT64 i)
          set.address(header, get.address(300))
          check(INT header[1], 1205, "di03389b")
        --}}}
    :
    bug.INSdi03389()
    --}}}
    finish ()
:
