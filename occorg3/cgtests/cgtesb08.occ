-- version control marker $Id: cgtest08.occ,v 1.7 1996/11/05 12:16:16 svd Exp $
PROC cgtest8 (CHAN OF BYTE keyb, scr, err)
  #INCLUDE "cgmain.occ"
  --{{{  cgmain.occ
  -- version control marker $Id: cgmain.occ,v 3.9 1997/03/06 16:36:15 dcw Exp $
  --{{{  cglib.occ
  -- version control marker $Id: cglib.occ,v 1.6 1997/01/30 12:31:09 dcw Exp $
  --
  -- Cut-down version of the output utilities from the course library
  --{{{  some constants
  VAL BYTE BELL IS 7(BYTE):
  VAL BYTE NULL IS 0(BYTE):
  VAL BYTE BACK IS 8(BYTE):
  VAL BYTE DELETE IS 127(BYTE):
  --}}}
  --{{{  out stuff
  PROC out.repeat (VAL BYTE ch,  VAL INT n,  CHAN OF BYTE out)
    --{{{
    IF
      n > 0
        SEQ i = 0 FOR n
          SEQ
            out ! ch
      TRUE
        SKIP
    --}}}
  :
  PROC out.ch (VAL BYTE ch,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    SEQ
      out.repeat (' ', field - 1, out)
      out ! ch
    --}}}
  :
  PROC out.ch.funny (VAL BYTE ch,  VAL INT field,  CHAN OF [1]BYTE out)
    --{{{
    SEQ
      VAL [1]BYTE thing RETYPES ch:
      out ! thing
    --}}}
  :
  PROC out.nl (CHAN OF BYTE out)
    SEQ
      out ! '*c'
      out ! '*n'
  :
  PROC in.ch (BYTE ch, CHAN OF BYTE in)
    --{{{
    in ? ch
    --}}}
  :
  PROC out.bell (CHAN OF BYTE out)
    --{{{
    out.ch (BELL, 1, out)
    --}}}
  :
  PROC out.string (VAL []BYTE s,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    VAL length IS SIZE s:
    SEQ
      out.repeat (' ', field - length, out)
      SEQ i = 0 FOR length
        SEQ
          out ! s [i]
    --}}}
  :
  PROC out.number (VAL INT n,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    VAL max.digits IS 20:
    [max.digits]INT D:
    INT x, i:
    IF
      (n = 0)
        --{{{  zero
        SEQ
          IF
            (1 < field)
              out.repeat (' ', field - 1, out)
            (TRUE)
              SKIP
          out ! '0'
        --}}}
      (TRUE)
        SEQ
          i := 0     --  bring this line up here,   Vedat
          --{{{  check negative
          IF
            (n < 0)
              SEQ        -- this one can handle MOSTNEG INT as well
                D [i] := -(n\10)
                x := -(n/10)
                i:= i + 1
            (TRUE)         -- (n > 0)
              x := n
          --}}}
          --{{{  decompose
          -- i := 0   -- this line goes up in order to handle MOSTNEG INT
          WHILE x > 0
            SEQ
              D [i] := x\10
              x := x/10
              i := i + 1
          --}}}
          --{{{  pad
          IF
            (n > 0)
              out.repeat (' ', field - i, out)
            (TRUE)
              SEQ
                out.repeat (' ', (field - 1) - i, out)
                out ! '-'
          --}}}
          --{{{  output
          WHILE i > 0
            SEQ
              i := i - 1
              out ! BYTE (D [i] + (INT '0'))
          --}}}
    --}}}
  :
  PROC out.bool (VAL BOOL b,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    IF
      (b = TRUE)
        out.ch ('1', field, out)
      (b = FALSE)
        out.ch ('0', field, out)
      (TRUE)
        out.ch ('.', field, out)
    --}}}
  :
  PROC out.yes.no (VAL BOOL b,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    IF
      b
        out.string ("yes", field, out)
      TRUE
        out.string ("no", field, out)
    --}}}
  :
  PROC out.hex.int (VAL INT x, l, CHAN OF BYTE out)
    --{{{  body of cg.write.hex.int
    -- this procedure ignores the field length parameter 'l'
    -- independent of endianism - DCW
    VAL INT nibble          IS #F:
    VAL INT hex.dig.per.int IS 8:
    VAL INT bit.per.hex.dig IS 4:
    VAL hex.dig             IS "0123456789ABCDEF":
    INT digit, mask, shift:
    [12]BYTE s:
    SEQ
      s[0]:= '#'
      SEQ i = 1 FOR hex.dig.per.int
        SEQ
          shift :=  (hex.dig.per.int - i) * bit.per.hex.dig
          digit := (x >> shift) /\ nibble
          s[i]:= hex.dig[digit]
      out.string ([s FROM 0 FOR (hex.dig.per.int + 1)], 0, out)
    --}}}
  :
  PROC black.hole (CHAN OF BYTE in)
    --{{{
    WHILE TRUE
      BYTE any:
      in ? any
    --}}}
  :
  --}}}
  --}}}
  VAL display.names  IS TRUE :
  --VAL display.names  IS TRUE :
  --VAL display.titles IS display.names :
  VAL display.titles IS TRUE :
  VAL no.of.columns   IS 6 :
  VAL width.of.column IS 10 :
  TIMER timer:                    -- DCW
  INT start.time, end.time:       -- DCW
  INT column.count :
  --{{{  [INLINE] PROC out (VAL INT ch)
  PROC out (VAL INT ch)
    SEQ
      IF
        (ch >= 0) AND (ch < 256)
          scr ! BYTE ch
        TRUE
          SKIP
  :
  --}}}
  --{{{  PROC newline ()
  PROC newline ()
    SEQ
      out.nl (scr)
      column.count := 0
  :
  --}}}
  --{{{  PROC writes (VAL []BYTE s)
  PROC writes (VAL []BYTE s)
    out.string (s, 0, scr)
  :
  --}}}
  --{{{  [INLINE] PROC in (INT ch)
  PROC in (INT ch)
    --all input goes via this proc, but its only ever used to wait
    SEQ
      --newline ()
      --writes ("(Press any key) ")
      -- keyboard ? ch
      ch := ch  -- stop any warning not used
      newline ()
  :
  --}}}
  --{{{  [INLINE] PROC writen (VAL INT n)
  PROC writen (VAL INT n)
    out.number (n, 0, scr)
  :
  --}}}
  --{{{  [INLINE] PROC writehex (VAL INT value, length)
  PROC writehex (VAL INT value, length)
    --VAL hex IS "0123456789ABCDEF" :
    --SEQ
    --  SEQ i = 1 FOR length
    --    out (INT hex [(value >> ((length - i) * 4)) /\ #F] )
    --  out (-2)
    out.hex.int (value, length, scr)
  :
  --}}}
  --{{{  [INLINE] PROC beep ()
  PROC beep ()
    out (7)
  :
  --}}}
  --{{{  PROC failed.test  (VAL []BYTE where)
  PROC failed.test(VAL []BYTE where)
    SEQ
      beep()
      writes(where)
      IF
        display.names
          newline()
        TRUE
          SKIP
      writes (" Failed: ")
  :
  --}}}
  --{{{  PROC completed.ok (VAL []BYTE where)
  INT error.count, passed.count:
  PROC completed.ok (VAL []BYTE where)
    SEQ
      passed.count := passed.count + 1
      IF
        display.names
          SEQ
            writes (where)
            IF
              column.count < no.of.columns
                VAL spaces IS "            " :
                VAL INT n.spaces IS width.of.column - (SIZE where):
                SEQ
                  IF
                    n.spaces > 0
                      writes([spaces FROM 0 FOR width.of.column - (SIZE where)])
                      --SEQ i = 0 FOR width.of.column - (SIZE where)
                      --  out ('*s' (INT))
                    TRUE
                      out ('*s' (INT))
                  column.count := column.count + 1
              TRUE
                newline ()
        TRUE
          SKIP
  :
  --}}}
  INT any.integer.name :
  VAL []BYTE useless.name RETYPES any.integer.name :
  VAL nibbles.per.INT IS (SIZE useless.name) * 2 :
  --{{{  PROC check.BOOL (VAL BOOL val1, val2, VAL []BYTE test.type)
  PROC check.BOOL (VAL BOOL val1, val2, VAL []BYTE test.type)
    INT key :
    PROC writebool (VAL BOOL b)
      IF
        b
          writes ("TRUE")
        TRUE
          writes ("FALSE")
    :
    SEQ
      IF
        val1 = val2
          completed.ok (test.type)
        TRUE
          SEQ
            failed.test(test.type)
            writebool (val1)
            writes ("  ")
            writebool (val2)
            in (key)
            error.count := error.count + 1
  :
  --}}}
  --{{{  PROC check.BYTE (VAL BYTE val1, val2, VAL []BYTE test.type)
  PROC check.BYTE (VAL BYTE val1, val2, VAL []BYTE test.type)
    INT key :
    SEQ
      IF
        val1 = val2
          completed.ok (test.type)
        TRUE
          SEQ
            failed.test(test.type)
            writehex (INT val1, 2)
            writes ("  ")
            writehex (INT val2, 2)
            in (key)
            error.count := error.count + 1
  :
  --}}}
  --{{{  PROC check.INT (VAL INT val1, val2, VAL []BYTE test.type)
  PROC check.INT (VAL INT val1, val2, VAL []BYTE test.type)
    INT key :
    SEQ
      IF
        val1 = val2
          completed.ok (test.type)
        TRUE
          SEQ
            failed.test(test.type)
            writehex (val1, nibbles.per.INT)
            writes ("  ")
            writehex (val2, nibbles.per.INT)
            writes ("  ")
            writen (val1)
            writes ("  ")
            writen (val2)
            in (key)
            error.count := error.count + 1
  :
  --}}}
  --{{{  PROC check (VAL INT val1, val2, VAL []BYTE test.type)
  --INLINE PROC check (VAL INT val1, val2, VAL []BYTE test.type)
  -- If this is inline, every invocation creates an abbreviation
  -- VAL test.type IS "..." :
  -- and this makes the map file huge!
  PROC check (VAL INT val1, val2, VAL []BYTE test.type)
    check.INT (val1, val2, test.type)
    --{{{  COMMENT
    --IF
      --val1 = val2
        --check.INT (val1, val2, test.type)
      --TRUE
        --out.string ("!!! FAILED in check !!!*n*c", 0, out)
    --}}}
  :
  --}}}
  --{{{  PROC init (VAL []BYTE name, description)
  [20]BYTE saved.name :
  INT saved.name.len :
  PROC init (VAL []BYTE name, description)
    SEQ
      timer ? start.time          -- DCW
      writes (name)
      writes ("  --  ")
      writes (description)
      newline ()
      error.count := 0
      passed.count := 0
      saved.name.len := SIZE name
      [saved.name FROM 0 FOR saved.name.len] := name
  :
  --}}}
  --{{{  PROC title (VAL []BYTE string)
  PROC title (VAL []BYTE string)
    IF
      display.titles
        SEQ
          IF
            display.names
              newline ()
            TRUE
              SKIP
            TRUE
              STOP
          writes(string)
          newline()
      TRUE
        SKIP
      TRUE
        STOP
  :
  --}}}
  --{{{  PROC finish ()
  PROC finish ()
    SEQ
      IF
        display.names
          newline ()
        TRUE
          SKIP
      IF
        error.count > 0
          SEQ
            writes ("^^^ Failed : ")
            writes ([saved.name FROM 0 FOR saved.name.len])
            writes (": ")
            writen (error.count)
            writes (" errors detected, ")
        TRUE
          SEQ
            writes ("^^^ Passed : ")
            writes ([saved.name FROM 0 FOR saved.name.len])
            writes (": All ")
      writen (passed.count)
      writes (" tests passed OK")
      timer ? end.time            -- DCW
      newline ()
      writes ("Time = ")
      writen (end.time - start.time)
      writes (" ticks")
      newline ()
  :
  --}}}
  --{{{  identity functions
  -- These are designed to help stop the optimiser constant propagating.
  -- If it manages to defeat these, make them more complex, as long as they
  -- still return the identity function.
  BOOL   FUNCTION id.BOOL   (VAL BOOL   x)
    BOOL res :
    VALOF
      res := x
      RESULT res
  :
  BYTE   FUNCTION id.BYTE   (VAL BYTE   x)
    BYTE   res :
    VALOF
      res := x
      RESULT res
  :
  INT    FUNCTION id.INT    (VAL INT    x)
    INT    res :
    VALOF
      res := x
      RESULT res
  :
  INT16  FUNCTION id.INT16  (VAL INT16  x)
    INT16  res :
    VALOF
      res := x
      RESULT res
  :
  INT32  FUNCTION id.INT32  (VAL INT32  x)
    INT32  res :
    VALOF
      res := x
      RESULT res
  :
  INT64  FUNCTION id.INT64  (VAL INT64  x)
    INT64  res :
    VALOF
      res := x
      RESULT res
  :
  REAL32 FUNCTION id.REAL32 (VAL REAL32 x)
    REAL32 res :
    VALOF
      res := x
      RESULT res
  :
  REAL64 FUNCTION id.REAL64 (VAL REAL64 x)
    REAL64 res :
    VALOF
      res := x
      RESULT res
  :
  INT    FUNCTION id        (VAL INT    x)
    INT    res :
    VALOF
      res := x
      RESULT res
  :
  --}}}
  --}}}
  -- ticks per second
  VAL sec IS 1000000 :
  -- T4 (rev A)      IS   625000
  -- T4 (rev B) (Hi) IS  1000000 (also T2 and T8)
  -- T4 (rev B) (Lo) IS    15625 (also T2 and T8)
  -- Stride          IS       50
  -- Vax             IS 10000000
  -- KROC SPARC      IS  1000000
  -- KROC Alpha      IS  1000000
  VAL tenth.sec IS sec / 10 :
  SEQ
    init ("CG test 8", "Timer - Please wait a few seconds")
    --{{{  time waits
    --{{{  output message
    title ("Testing waits on the timer queue")
    --}}}
    --{{{  T0
    INT X:
    TIMER T:
    SEQ
      T ? X
      T ? AFTER (X PLUS (sec / 10))
      check (1, 1, "T0")
    --}}}
    --{{{  T1
    INT X, Y:
    TIMER T:
    SEQ
      T ? X
      T ? Y
      T ? AFTER (X PLUS (sec / 10))
      T ? AFTER (Y PLUS (sec / 10))
      check (1, 1, "T1")
    --}}}
    --{{{  T2
    INT X, Y:
    [2]TIMER T:
    SEQ
      PAR
        SEQ
          T[0] ? X
          T[0] ? AFTER (X PLUS (sec / 10))
        SEQ
          T[1] ? Y
          T[1] ? AFTER (Y PLUS (sec / 5))
      check (1, 1, "T2")
    --}}}
    --{{{  T3
    TIMER TIMER1:
    TIMER TIMER2:
    SEQ
      PAR
        --{{{
        INT X, Y:
        SEQ
          TIMER1 ? X
          TIMER1 ? AFTER (X PLUS (sec / 10))
          TIMER1 ? Y
          TIMER1 ? AFTER (Y PLUS (sec / 5))
        --}}}
        --{{{
        INT X, Y:
        SEQ
          TIMER2 ? X
          TIMER2 ? AFTER (X PLUS (sec / 7))
          TIMER2 ? Y
          TIMER2 ? AFTER (Y PLUS (sec / 3))
        --}}}
      check (1, 1, "T3")
    --}}}
    --{{{  T4
    [10]CHAN OF INT c:
    [10]INT X:
    [10]TIMER T:
    BOOL ok:
    SEQ
      ok := TRUE
      PAR
        --{{{  sender
        PAR i = 0 FOR 7
          INT X:
          SEQ
            T[i] ? X
            T[i] ? AFTER (X PLUS (tenth.sec / (i + 1)))
            c[i] ! i
        --}}}
        --{{{  receiver
        SEQ i = 0 FOR 7
          c[i] ? X[i]
        --}}}
      --{{{  checker
      SEQ i = 0 FOR 7
        IF
          X[i] = i
            SKIP
          TRUE
            ok := FALSE
      --}}}
      IF
        ok
          check (1, 1, "T4")
        TRUE
          check (1, 0, "T4")
    --}}}
    --{{{  T5
    [10]CHAN OF INT c:
    [10]INT X:
    BOOL ok:
    SEQ
      ok := TRUE
      PAR
        --{{{  sender
        PAR i = 0 FOR 10
          TIMER T:
          INT X:
          SEQ
            T ? X
            T ? AFTER (X PLUS (tenth.sec / (i + 1)))
            c[i] ! i
        --}}}
        --{{{  receiver
        SEQ i = 0 FOR 10
          c[i] ? X[i]
        --}}}
      --{{{  checker
      SEQ i = 0 FOR 10
        IF
          X[i] = i
            SKIP
          TRUE
            ok := FALSE
      --}}}
      check (INT ok, INT TRUE, "T5")
    --}}}
    --{{{  T6
    CHAN OF INT c:
    [10]TIMER Tim:
    TIMER Time:
    [10]INT X:
    SEQ
      PAR
        PAR i = 0 FOR 10    -- noise on timer queue
          SEQ
            Tim[i] ? X[i]
            Tim[i] ? AFTER (X[i] PLUS (tenth.sec / (i + 1)))
        INT A:     -- sender
        SEQ
          Time ? A
          Time ? AFTER (A PLUS (tenth.sec * 2))
          c ! 0
        INT A:     -- receiver
        SEQ
          c ? A
          check (1, 1, "T6")
    --}}}
    --{{{  T7
    PROC T7()
      CHAN OF INT c:
      [10]TIMER Tim:
      TIMER Time:
      [10]INT X:
      SEQ
        PAR
          PAR i = 0 FOR 10    -- noise on timer queue
            INT when :
            SEQ
              Tim[i] ? X[i]
              when := (X[i] PLUS (tenth.sec / (i + 1)))
              Tim[i] ? AFTER when
          INT A, when:     -- sender
          SEQ
            Time ? A
            when := (A PLUS (tenth.sec * 2))
            Time ? AFTER when
            c ! 0
          INT A:     -- receiver
          SEQ
            c ? A
            check (1, 1, "T7")
    :
    T7()
    --}}}
    --{{{  T8
    PROC T8()
      CHAN OF INT c:
      [10]TIMER Tim:
      TIMER Time:
      [10]INT X:
      SEQ
        PAR
          PAR i = 0 FOR 10    -- noise on timer queue
            SEQ
              Tim[i] ? X[i]
              X[i] := (X[i] PLUS (tenth.sec / (i + 1)))
              Tim[i] ? AFTER X[i]
          INT A:     -- sender
          SEQ
            Time ? A
            A := (A PLUS (tenth.sec * 2))
            Time ? AFTER A
            c ! 0
          INT A:     -- receiver
          SEQ
            c ? A
            check (1, 1, "T8")
    :
    T8()
    --}}}
    --}}}
    --{{{  time ALTS
    --{{{  output message
    title ("Testing time channel ALTs")
    --}}}
    --{{{  TA0  - TA1
    BOOL ok:
    [3]TIMER T:
    INT time0, time1, time2:
    SEQ
      ok := TRUE
      T[0] ? time0
      T[1] ? time1
      T[2] ? time2
      ALT
        T[0] ? AFTER (time0 MINUS tenth.sec)
          check(1, 1, "TA0")
        T[1] ? AFTER (time1 PLUS tenth.sec)
          ok := FALSE
        T[2] ? AFTER (time2 PLUS tenth.sec)
          ok := FALSE
      check(INT ok, INT TRUE, "TA1")
    --}}}
    --{{{  TA2  - TA3
    BOOL ok:
    [3]TIMER T:
    INT time0, time1, time2:
    SEQ
      ok := TRUE
      T[0] ? time0
      T[1] ? time1
      T[2] ? time2
      ALT
        T[0] ? AFTER (time0 PLUS 10000)
          ok := FALSE
        T[1] ? AFTER (time1 MINUS 1)
          check(1, 1, "TA2")
        T[2] ? AFTER (time2 PLUS 10000)
          ok := FALSE
      check(INT ok, INT TRUE, "TA3")
    --}}}
    --{{{  TA4  - TA5
    BOOL ok:
    [3]TIMER T:
    INT time0, time1, time2:
    SEQ
      ok := TRUE
      T[0] ? time0
      T[1] ? time1
      T[2] ? time2
      ALT
        T[0] ? AFTER (time0 PLUS tenth.sec)
          ok := FALSE
        T[1] ? AFTER (time1 PLUS tenth.sec)
          ok := FALSE
        T[2] ? AFTER (time2 MINUS 1)
          check(1, 1, "TA4")
      check(INT ok, INT TRUE, "TA5")
    --}}}
    --{{{  TA6  - TA7
    BOOL ok:
    [3]TIMER T:
    INT time0, time1, time2:
    SEQ
      ok := TRUE
      T[0] ? time0
      T[1] ? time1
      T[2] ? time2
      ALT
        T[0] ? AFTER (time0 PLUS tenth.sec)
          ok := FALSE
        T[1] ? AFTER (time1 PLUS tenth.sec)
          ok := FALSE
        T[2] ? AFTER (time2 PLUS (tenth.sec / 2))
          check(1, 1, "TA6")
      check(INT ok, INT TRUE, "TA7")
    --}}}
    --{{{  TA8  - TA9
    BOOL ok:
    [3]TIMER T:
    INT time0, time1, time2:
    SEQ
      ok := TRUE
      T[0] ? time0
      T[1] ? time1
      T[2] ? time2
      ALT
        T[0] ? AFTER (time0 PLUS sec)
          ok := FALSE
        T[1] ? AFTER (time1 PLUS (sec / 20))
          check(1, 1, "TA8")
        T[2] ? AFTER (time2 PLUS (sec / 2))
          ok := FALSE
      check(INT ok, INT TRUE, "TA9")
    --}}}
    --{{{  TA10 - TA11
    BOOL ok:
    [3]TIMER T:
    INT time0, time1, time2:
    SEQ
      ok := TRUE
      T[0] ? time0
      T[1] ? time1
      T[2] ? time2
      ALT
        T[0] ? AFTER (time0 PLUS (sec / 30))
          check(1, 1, "TA10")
        T[1] ? AFTER (time1 PLUS sec)
          ok := FALSE
        T[2] ? AFTER (time2 PLUS (sec / 2))
          ok := FALSE
      check(INT ok, INT TRUE, "TA11")
    --}}}
    --{{{  TA12 - TA15
    INT ok:
    [6]TIMER T:
    [6]INT time:
    SEQ
      ok := 0
      --{{{
      SEQ i = 0 FOR 3
        T[i] ? time[i]
      ALT i = 0 FOR 3
        T[i] ? AFTER (time[i] PLUS (tenth.sec / (i + 1)))
          check(i, 2, "TA12")
      --}}}
      --{{{
      SEQ i = 0 FOR 6
        T[i] ? time[i]
      ALT i = 0 FOR 6
        T[i] ? AFTER (time[i] PLUS (tenth.sec + (tenth.sec * i)))
          SEQ
            check(i, 0, "TA13")
            ok := ok + 1
      --}}}
      --{{{
      T[1] ? time[1]
      SEQ i = 1 FOR 5
        T[i] ? time[i]
      ALT i = 1 FOR 5
        T[i] ? AFTER (time[i] PLUS (sec + ((10*tenth.sec) / i)))
          check(i, 5, "TA14")
      --}}}
      check(ok, 1, "TA15")
    --}}}
    --{{{  TA20
    CHAN OF INT c :
    PAR
      TIMER t1 :
      INT x :
      SEQ
        t1 ? x
        t1 ? AFTER (x PLUS (sec / 10))
        c ! 0
      TIMER t2 :
      INT y , z :
      SEQ
        t2 ? y
        ALT
          t2 ? AFTER (y PLUS (sec / 5))
            z := 1
          c ? z
            SKIP
        check (z, 0, "TA20")
    --}}}
    --{{{  TA21 - TA23
    CHAN OF INT c1, c2 :
    PAR
      --{{{  output on c1 after sec/100
      TIMER t1 :
      INT x :
      SEQ
        t1 ? x
        t1 ? AFTER (x PLUS (sec / 100))
        c1 ! 0
      --}}}
      --{{{  output on c2 after sec/50
      TIMER t2 :
      INT x :
      SEQ
        t2 ? x
        t2 ? AFTER (x PLUS (sec / 50))
        c2 ! 0
      --}}}
      TIMER t3 :
      INT y , z :
      BOOL wait.for.timer :
      SEQ
        t3 ? y
        wait.for.timer := TRUE
        SEQ i = 0 FOR 3
          ALT
            wait.for.timer & t3 ? AFTER (y PLUS (sec / 5))
              SEQ
                check (i, 2, "TA21")
                wait.for.timer := FALSE
            c1 ? z
              check (i, 0, "TA22")
            c2 ? z
              check (i, 1, "TA23")
    --}}}
    --{{{  guarded ALTs               (TA30 -> TA49)
    PROC guarded.ALTs()
      -- This tests every combination of 3 guards, using local vars for
      -- the guards
      SEQ i = 0 FOR 8  -- 8 combinations of three guards
        TIMER clock :
        INT start, time.a, time.b, time.c, long.time :
        BOOL guard.a, guard.b, guard.c :
        BOOL taken.a, taken.b, taken.c :
        --{{{  PROC init.locals
        PROC init.locals()
          SEQ
            taken.a, taken.b, taken.c := FALSE, FALSE, FALSE
            guard.a := (i /\ 1) <> 0
            guard.b := (i /\ 2) <> 0
            guard.c := (i /\ 4) <> 0
            clock ? start
            time.a    := start PLUS ((sec / 10) * 1)
            time.b    := start PLUS ((sec / 10) * 2)
            time.c    := start PLUS ((sec / 10) * 3)
            long.time := start PLUS ((sec / 10) * 4)
        :
        --}}}
        --{{{  PROC check.taken
        PROC check.taken()
          CASE i
            0
              check.BOOL(NOT (taken.a OR taken.b OR taken.c), TRUE, "TA34")
            1, 3, 5, 7
              check.BOOL(taken.a AND (NOT (taken.b OR taken.c)), TRUE, "TA35")
            2, 6
              check.BOOL(taken.b AND (NOT (taken.a OR taken.c)), TRUE, "TA36")
            4
              check.BOOL(taken.c AND (NOT (taken.a OR taken.b)), TRUE, "TA37")
        :
        --}}}
        SEQ
          init.locals()
          --{{{  ALT in order
          PRI ALT
            guard.a & clock ? AFTER time.a
              SEQ
                check.BOOL(guard.a, TRUE, "TA30")
                taken.a := TRUE
            guard.b & clock ? AFTER time.b
              SEQ
                check.BOOL(guard.b, TRUE, "TA31")
                taken.b := TRUE
            guard.c & clock ? AFTER time.c
              SEQ
                check.BOOL(guard.c, TRUE, "TA32")
                taken.c := TRUE
            clock ? AFTER long.time
              SEQ
                check.BOOL(guard.a OR guard.b OR guard.c, FALSE, "TA33")
          --}}}
          check.taken()
          init.locals()
          --{{{  ALT out of order
          PRI ALT
            guard.c & clock ? AFTER time.c
              SEQ
                check.BOOL(guard.c, TRUE, "TA42")
                taken.c := TRUE
            guard.a & clock ? AFTER time.a
              SEQ
                check.BOOL(guard.a, TRUE, "TA40")
                taken.a := TRUE
            guard.b & clock ? AFTER time.b
              SEQ
                check.BOOL(guard.b, TRUE, "TA41")
                taken.b := TRUE
            clock ? AFTER long.time
              SEQ
                check.BOOL(guard.a OR guard.b OR guard.c, FALSE, "TA43")
          --}}}
          check.taken()
    :
    guarded.ALTs()
    --}}}
    --{{{  guarded array ALTs         (TA50 -> TA69)
    PROC guarded.array.ALTs()
      -- This tests every combination of guards, using array vars for
      -- the guards
      VAL n IS 3 : -- number of branches in ALT
      SEQ i = 0 FOR 1 << n
        TIMER clock :
        [n]INT time :
        [n]BOOL guard, taken :
        INT start, long.time :
        --{{{  init.array
        PROC init.array()
          SEQ
            clock ? start
            SEQ j = 0 FOR n
              SEQ
                taken[j] := FALSE
                guard[j] := (i /\ (1 << j)) <> 0
                time[j]  := start PLUS ((sec / 10) * (j + 1))
            long.time    := start PLUS ((sec / 10) * (n + 1))
        :
        --}}}
        --{{{  check.taken.array
        PROC check.taken.array()
          BOOL set :
          SEQ
            set := FALSE
            SEQ j = 0 FOR n
              SEQ
                IF
                  set
                    check.BOOL(taken[j], FALSE, "TA52")
                  taken[j]
                    SEQ
                      check.BOOL((i /\ (1 << j)) <> 0, TRUE, "TA53")
                      set := TRUE
                  TRUE
                    SKIP
        :
        --}}}
        SEQ
          init.array()
          --{{{  ALT in order
          ALT
            ALT j = 0 FOR n
              guard[j] & clock ? AFTER time[j]
                SEQ
                  check.BOOL(guard[j], TRUE, "TA50")
                  taken[j] := TRUE
            clock ? AFTER long.time
              SEQ k = 0 FOR n
                check.BOOL(guard[k], FALSE, "TA51")
          --}}}
          check.taken.array()
          init.array()
          --{{{  ALT out of order
          ALT
            clock ? AFTER long.time
              SEQ k = 0 FOR n
                check.BOOL(guard[k], FALSE, "TA61")
            ALT j = 0 FOR n
              VAL j IS ((n - 1) - j) :
              guard[j] & clock ? AFTER time[j]
                SEQ
                  check.BOOL(guard[j], TRUE, "TA60")
                  taken[j] := TRUE
          --}}}
          check.taken.array()
    :
    guarded.array.ALTs()
    --}}}
    --}}}
    --{{{  timers as free variables
    PROC timers.as.free.variables()
      TIMER timer :
      INT x, y :
      PROC read.x(INT x)
        timer ? x
      :
      PROC read()
        timer ? x
      :
      PROC after()
        timer ? AFTER x
      :
      PROC after.x(VAL INT x)
        timer ? AFTER x
      :
      SEQ
        read()
        read.x(y)
        check.BOOL((y AFTER x) OR (y = x), TRUE, "FREE01")
        x := x PLUS (sec / 100)
        y := y PLUS (sec / 100)
        after()
        after.x(y)
        check.BOOL((y AFTER x) OR (y = x), TRUE, "FREE02")
    :
    timers.as.free.variables()
    --}}}
    --{{{  timers in parallel
    PROC timers.in.parallel()
      TIMER timer :
      --{{{  read.timer
      PROC read.timer(TIMER timer, INT time)
        timer ? time
      :
      --}}}
      --{{{  read
      PROC read(INT time)
        timer ? time
      :
      --}}}
      --{{{  delay
      PROC delay()
        TIMER t :
        INT now :
        SEQ
          t ? now
          t ? AFTER now PLUS (sec / 100)
      :
      --}}}
      INT time0, time1, time2, time3 :
      SEQ
        --{{{  passing timer as parameter
        read.timer(timer, time0)
        delay()
        PAR
          SEQ
            read.timer(timer, time1)
            delay()
          SEQ
            read.timer(timer, time2)
            delay()
        delay()
        read.timer(timer, time3)
        check.BOOL(time1 AFTER time0, TRUE, "PAR001")
        check.BOOL(time2 AFTER time0, TRUE, "PAR002")
        check.BOOL(time3 AFTER time0, TRUE, "PAR003")
        check.BOOL(time3 AFTER time1, TRUE, "PAR004")
        check.BOOL(time3 AFTER time2, TRUE, "PAR005")
        --}}}
        --{{{  passing timer as free var
        read(time0)
        delay()
        PAR
          SEQ
            read(time1)
            delay()
          SEQ
            read(time2)
            delay()
        delay()
        read(time3)
        check.BOOL(time1 AFTER time0, TRUE, "PAR001")
        check.BOOL(time2 AFTER time0, TRUE, "PAR002")
        check.BOOL(time3 AFTER time0, TRUE, "PAR003")
        check.BOOL(time3 AFTER time1, TRUE, "PAR004")
        check.BOOL(time3 AFTER time2, TRUE, "PAR005")
        --}}}
    :
    timers.in.parallel()
    --}}}
    --{{{  bug 287
    PROC bug.287 ()
      INT time, x :
      SEQ
        x := id(1)
        [4]TIMER clock :
        SEQ
          TIMER clock.a IS clock[2] :
          clock.a ? time
          check(time, time, "B287a")
          clock [x] ? time
          check(time, time, "B287b")
        [100][200]TIMER clocks :
        c IS clocks [x][x] :
        SEQ
          c ? time
          check (time, time, "B287c")
    :
    bug.287 ()
    --}}}
    --{{{  bug.TS.1774
    PROC bug.TS.1774()
      PROC wait.for.time(TIMER t, VAL INT time)
        ALT
          t ? AFTER time
            SKIP
      :
      TIMER t :
      INT now, answer :
      VAL z IS -99 :
      SEQ
        answer := 374
        t ? now
        now := now PLUS (sec / 30)
        PAR
          -- This process ALTs on a timer, and does nothing else
          -- We need more than one process on the timer queue!
          wait.for.time(t, now)
          -- This process tries to corrupt the queue
          INT a,b,c,d,e,f,g,h,i :
          a,b,c,d,e,f,g,h,i := z,z,z,z,z,z,z,z,z
          -- This process ALTs on a timer, and does nothing else
          SEQ
            wait.for.time(t, now)
            answer := 999
          -- This process ALTs on a timer, and does nothing else
          -- We need more than one process on the timer queue!
          wait.for.time(t, now)
          -- This process tries to corrupt the queue
          INT a,b,c,d,e,f,g,h,i :
          a,b,c,d,e,f,g,h,i := z,z,z,z,z,z,z,z,z
          -- This process ALTs on a timer, and does nothing else
          -- We need more than one process on the timer queue!
          wait.for.time(t, now)
        check(answer, 999, "B1774b")
    :
    bug.TS.1774()
    --}}}
    --{{{  bug INSdi01967
    PROC bug.INSdi01967()
      INT FUNCTION f(VAL INT x) IS x :
      TIMER clock :
      [10]INT a :
      INT i, j, k, now :
      PROC init()
        SEQ
          clock ? now
          SEQ i = 0 FOR SIZE a
            a[i] := now PLUS (i+10)
          i, j, k := 3, 5, 4
      :
      SEQ
        init()
        PRI ALT
          clock ? AFTER f([a FROM i FOR j] [k])
            i := j
          clock ? AFTER now PLUS 20000
            i := j + 1
        check(i, j, "B01967a")
        init()
        clock ? AFTER f([a FROM i FOR j] [k])
        check(f([a FROM i FOR j] [k]), now PLUS 17, "B01967b")
        init()
        ANY FUNCTION aa1()
          VAL xx IS [a FROM i FOR j] :
          VALOF
            SKIP
            RESULT f(xx [k])
        :
        clock ? AFTER aa1()
        check(f([a FROM i FOR j] [k]), now PLUS 17, "B01967c")
    :
    bug.INSdi01967()
    --}}}
    finish ()
:
