PROC cgtest1 (CHAN OF BYTE keyb, scr, err)
  --{{{  cgmain.occ
  -- version control marker $Id: cgmain.occ,v 3.9 1997/03/06 16:36:15 dcw Exp $
  --{{{  cglib.occ
  -- version control marker $Id: cglib.occ,v 1.6 1997/01/30 12:31:09 dcw Exp $
  --
  -- Cut-down version of the output utilities from the course library
  --{{{  some constants
  VAL BYTE BELL IS 7(BYTE):
  VAL BYTE NULL IS 0(BYTE):
  VAL BYTE BACK IS 8(BYTE):
  VAL BYTE DELETE IS 127(BYTE):
  --}}}
  --{{{  out stuff
  PROC out.repeat (VAL BYTE ch,  VAL INT n,  CHAN OF BYTE out)
    --{{{
    IF
      n > 0
        SEQ i = 0 FOR n
          SEQ
            out ! ch
      TRUE
        SKIP
    --}}}
  :
  PROC out.ch (VAL BYTE ch,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    SEQ
      out.repeat (' ', field - 1, out)
      out ! ch
    --}}}
  :
  PROC out.ch.funny (VAL BYTE ch,  VAL INT field,  CHAN OF [1]BYTE out)
    --{{{
    SEQ
      VAL [1]BYTE thing RETYPES ch:
      out ! thing
    --}}}
  :
  PROC out.nl (CHAN OF BYTE out)
    SEQ
      out ! '*c'
      out ! '*n'
  :
  PROC in.ch (BYTE ch, CHAN OF BYTE in)
    --{{{
    in ? ch
    --}}}
  :
  PROC out.bell (CHAN OF BYTE out)
    --{{{
    out.ch (BELL, 1, out)
    --}}}
  :
  PROC out.string (VAL []BYTE s,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    VAL length IS SIZE s:
    SEQ
      out.repeat (' ', field - length, out)
      SEQ i = 0 FOR length
        SEQ
          out ! s [i]
    --}}}
  :
  PROC out.number (VAL INT n,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    VAL max.digits IS 20:
    [max.digits]INT D:
    INT x, i:
    IF
      (n = 0)
        --{{{  zero
        SEQ
          IF
            (1 < field)
              out.repeat (' ', field - 1, out)
            (TRUE)
              SKIP
          out ! '0'
        --}}}
      (TRUE)
        SEQ
          i := 0     --  bring this line up here,   Vedat
          --{{{  check negative
          IF
            (n < 0)
              SEQ        -- this one can handle MOSTNEG INT as well
                D [i] := -(n\10)
                x := -(n/10)
                i:= i + 1
            (TRUE)         -- (n > 0)
              x := n
          --}}}
          --{{{  decompose
          -- i := 0   -- this line goes up in order to handle MOSTNEG INT
          WHILE x > 0
            SEQ
              D [i] := x\10
              x := x/10
              i := i + 1
          --}}}
          --{{{  pad
          IF
            (n > 0)
              out.repeat (' ', field - i, out)
            (TRUE)
              SEQ
                out.repeat (' ', (field - 1) - i, out)
                out ! '-'
          --}}}
          --{{{  output
          WHILE i > 0
            SEQ
              i := i - 1
              out ! BYTE (D [i] + (INT '0'))
          --}}}
    --}}}
  :
  PROC out.bool (VAL BOOL b,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    IF
      (b = TRUE)
        out.ch ('1', field, out)
      (b = FALSE)
        out.ch ('0', field, out)
      (TRUE)
        out.ch ('.', field, out)
    --}}}
  :
  PROC out.yes.no (VAL BOOL b,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    IF
      b
        out.string ("yes", field, out)
      TRUE
        out.string ("no", field, out)
    --}}}
  :
  PROC out.hex.int (VAL INT x, l, CHAN OF BYTE out)
    --{{{  body of cg.write.hex.int
    -- this procedure ignores the field length parameter 'l'
    -- independent of endianism - DCW
    VAL INT nibble          IS #F:
    VAL INT hex.dig.per.int IS 8:
    VAL INT bit.per.hex.dig IS 4:
    VAL hex.dig             IS "0123456789ABCDEF":
    INT digit, mask, shift:
    [12]BYTE s:
    SEQ
      s[0]:= '#'
      SEQ i = 1 FOR hex.dig.per.int
        SEQ
          shift :=  (hex.dig.per.int - i) * bit.per.hex.dig
          digit := (x >> shift) /\ nibble
          s[i]:= hex.dig[digit]
      out.string ([s FROM 0 FOR (hex.dig.per.int + 1)], 0, out)
    --}}}
  :
  PROC black.hole (CHAN OF BYTE in)
    --{{{
    WHILE TRUE
      BYTE any:
      in ? any
    --}}}
  :
  --}}}
  --}}}
  VAL display.names  IS TRUE :
  --VAL display.names  IS TRUE :
  --VAL display.titles IS display.names :
  VAL display.titles IS TRUE :
  VAL no.of.columns   IS 6 :
  VAL width.of.column IS 10 :
  TIMER timer:                    -- DCW
  INT start.time, end.time:       -- DCW
  INT column.count :
  --{{{  [INLINE] PROC out (VAL INT ch)
  PROC out (VAL INT ch)
    SEQ
      IF
        (ch >= 0) AND (ch < 256)
          scr ! BYTE ch
        TRUE
          SKIP
  :
  --}}}
  --{{{  PROC newline ()
  PROC newline ()
    SEQ
      out.nl (scr)
      column.count := 0
  :
  --}}}
  --{{{  PROC writes (VAL []BYTE s)
  PROC writes (VAL []BYTE s)
    out.string (s, 0, scr)
  :
  --}}}
  --{{{  [INLINE] PROC in (INT ch)
  PROC in (INT ch)
    --all input goes via this proc, but its only ever used to wait
    SEQ
      --newline ()
      --writes ("(Press any key) ")
      -- keyboard ? ch
      ch := ch  -- stop any warning not used
      newline ()
  :
  --}}}
  --{{{  [INLINE] PROC writen (VAL INT n)
  PROC writen (VAL INT n)
    out.number (n, 0, scr)
  :
  --}}}
  --{{{  [INLINE] PROC writehex (VAL INT value, length)
  PROC writehex (VAL INT value, length)
    --VAL hex IS "0123456789ABCDEF" :
    --SEQ
    --  SEQ i = 1 FOR length
    --    out (INT hex [(value >> ((length - i) * 4)) /\ #F] )
    --  out (-2)
    out.hex.int (value, length, scr)
  :
  --}}}
  --{{{  [INLINE] PROC beep ()
  PROC beep ()
    out (7)
  :
  --}}}
  --{{{  PROC failed.test  (VAL []BYTE where)
  PROC failed.test(VAL []BYTE where)
    SEQ
      beep()
      writes(where)
      IF
        display.names
          newline()
        TRUE
          SKIP
      writes (" Failed: ")
  :
  --}}}
  --{{{  PROC completed.ok (VAL []BYTE where)
  INT error.count, passed.count:
  PROC completed.ok (VAL []BYTE where)
    SEQ
      passed.count := passed.count + 1
      IF
        display.names
          SEQ
            writes (where)
            IF
              column.count < no.of.columns
                VAL spaces IS "            " :
                VAL INT n.spaces IS width.of.column - (SIZE where):
                SEQ
                  IF
                    n.spaces > 0
                      writes([spaces FROM 0 FOR width.of.column - (SIZE where)])
                      --SEQ i = 0 FOR width.of.column - (SIZE where)
                      --  out ('*s' (INT))
                    TRUE
                      out ('*s' (INT))
                  column.count := column.count + 1
              TRUE
                newline ()
        TRUE
          SKIP
  :
  --}}}
  INT any.integer.name :
  VAL []BYTE useless.name RETYPES any.integer.name :
  VAL nibbles.per.INT IS (SIZE useless.name) * 2 :
  --{{{  PROC check.BOOL (VAL BOOL val1, val2, VAL []BYTE test.type)
  PROC check.BOOL (VAL BOOL val1, val2, VAL []BYTE test.type)
    INT key :
    PROC writebool (VAL BOOL b)
      IF
        b
          writes ("TRUE")
        TRUE
          writes ("FALSE")
    :
    SEQ
      IF
        val1 = val2
          completed.ok (test.type)
        TRUE
          SEQ
            failed.test(test.type)
            writebool (val1)
            writes ("  ")
            writebool (val2)
            in (key)
            error.count := error.count + 1
  :
  --}}}
  --{{{  PROC check.BYTE (VAL BYTE val1, val2, VAL []BYTE test.type)
  PROC check.BYTE (VAL BYTE val1, val2, VAL []BYTE test.type)
    INT key :
    SEQ
      IF
        val1 = val2
          completed.ok (test.type)
        TRUE
          SEQ
            failed.test(test.type)
            writehex (INT val1, 2)
            writes ("  ")
            writehex (INT val2, 2)
            in (key)
            error.count := error.count + 1
  :
  --}}}
  --{{{  PROC check.INT (VAL INT val1, val2, VAL []BYTE test.type)
  PROC check.INT (VAL INT val1, val2, VAL []BYTE test.type)
    INT key :
    SEQ
      IF
        val1 = val2
          completed.ok (test.type)
        TRUE
          SEQ
            failed.test(test.type)
            writehex (val1, nibbles.per.INT)
            writes ("  ")
            writehex (val2, nibbles.per.INT)
            writes ("  ")
            writen (val1)
            writes ("  ")
            writen (val2)
            in (key)
            error.count := error.count + 1
  :
  --}}}
  --{{{  PROC check (VAL INT val1, val2, VAL []BYTE test.type)
  --INLINE PROC check (VAL INT val1, val2, VAL []BYTE test.type)
  -- If this is inline, every invocation creates an abbreviation
  -- VAL test.type IS "..." :
  -- and this makes the map file huge!
  PROC check (VAL INT val1, val2, VAL []BYTE test.type)
    check.INT (val1, val2, test.type)
    --{{{  COMMENT
    --IF
      --val1 = val2
        --check.INT (val1, val2, test.type)
      --TRUE
        --out.string ("!!! FAILED in check !!!*n*c", 0, out)
    --}}}
  :
  --}}}
  --{{{  PROC init (VAL []BYTE name, description)
  [20]BYTE saved.name :
  INT saved.name.len :
  PROC init (VAL []BYTE name, description)
    SEQ
      timer ? start.time          -- DCW
      writes (name)
      writes ("  --  ")
      writes (description)
      newline ()
      error.count := 0
      passed.count := 0
      saved.name.len := SIZE name
      [saved.name FROM 0 FOR saved.name.len] := name
  :
  --}}}
  --{{{  PROC title (VAL []BYTE string)
  PROC title (VAL []BYTE string)
    IF
      display.titles
        SEQ
          IF
            display.names
              newline ()
            TRUE
              SKIP
            TRUE
              STOP
          writes(string)
          newline()
      TRUE
        SKIP
      TRUE
        STOP
  :
  --}}}
  --{{{  PROC finish ()
  PROC finish ()
    SEQ
      IF
        display.names
          newline ()
        TRUE
          SKIP
      IF
        error.count > 0
          SEQ
            writes ("^^^ Failed : ")
            writes ([saved.name FROM 0 FOR saved.name.len])
            writes (": ")
            writen (error.count)
            writes (" errors detected, ")
        TRUE
          SEQ
            writes ("^^^ Passed : ")
            writes ([saved.name FROM 0 FOR saved.name.len])
            writes (": All ")
      writen (passed.count)
      writes (" tests passed OK")
      timer ? end.time            -- DCW
      newline ()
      writes ("Time = ")
      writen (end.time - start.time)
      writes (" ticks")
      newline ()
  :
  --}}}
  --{{{  identity functions
  -- These are designed to help stop the optimiser constant propagating.
  -- If it manages to defeat these, make them more complex, as long as they
  -- still return the identity function.
  BOOL   FUNCTION id.BOOL   (VAL BOOL   x)
    BOOL res :
    VALOF
      res := x
      RESULT res
  :
  BYTE   FUNCTION id.BYTE   (VAL BYTE   x)
    BYTE   res :
    VALOF
      res := x
      RESULT res
  :
  INT    FUNCTION id.INT    (VAL INT    x)
    INT    res :
    VALOF
      res := x
      RESULT res
  :
  INT16  FUNCTION id.INT16  (VAL INT16  x)
    INT16  res :
    VALOF
      res := x
      RESULT res
  :
  INT32  FUNCTION id.INT32  (VAL INT32  x)
    INT32  res :
    VALOF
      res := x
      RESULT res
  :
  INT64  FUNCTION id.INT64  (VAL INT64  x)
    INT64  res :
    VALOF
      res := x
      RESULT res
  :
  REAL32 FUNCTION id.REAL32 (VAL REAL32 x)
    REAL32 res :
    VALOF
      res := x
      RESULT res
  :
  REAL64 FUNCTION id.REAL64 (VAL REAL64 x)
    REAL64 res :
    VALOF
      res := x
      RESULT res
  :
  INT    FUNCTION id        (VAL INT    x)
    INT    res :
    VALOF
      res := x
      RESULT res
  :
  --}}}
  --}}}
  --{{{  static chain
  VAL T  IS [1,2,3] :
  VAL BT IS [BYTE 4, BYTE 5, BYTE 6] :
  INT X, Y:
  [3]INT  V :
  [3]BYTE BV :
  INT zero, one, two:
  --{{{  C1
  PROC C1 ()
    X := 42
  :
  --}}}
  --{{{  C2
  PROC C2 ()
    PROC C1 ()
      X := 36
    :
    C1 ()
  :
  PROC C2 ()        -- descoping the above one
    PROC C1 ()
      X := 69
    :
    C1 ()
  :
  --}}}
  --{{{  C3
  PROC C3 ()
    PROC C4 ()
      PROC C5 ()
        X := 42
      :
      SEQ
        X := 69
        check( X, 69, "C3")
        C5 ()
        check( X, 42, "C4")
    :
    SEQ
      C4 ()
      X := 666
  :
  --}}}
  --{{{  C4
  PROC C4 (VAL INT A, INT B)
    PROC C1 ()
      B := A
    :
    PROC C2 ()
      B := A * A
    :
    PROC C3 (VAL INT X, INT Y)
      Y := X
    :
    SEQ
      C1 ()
      check( A, B, "C5")
      C2 ()
      check( A * A, B, "C6")
      C3 (A, B)
      check( A, B, "C7")
  :
  --}}}
  --{{{  C5
  PROC C5 ()
    PROC C1 (VAL INT X, INT Y)
      Y := X
    :
    SEQ
      C1 (42, X)
      check (X, 42, "C9")
  :
  --}}}
  --{{{  C6
  PROC C6 ()
    CHAN OF INT Sync:
    SEQ
      PAR
        PROC C1 (VAL INT X, INT Y)
          Y := X - 1
        :
        SEQ
          C1 (43, X)
          Sync ! 1
        PROC C1 (VAL INT X, INT Y)
          Y := X + 1
        :
        INT junk:
        SEQ
          Sync ? junk
          C1 (68, Y)
      SEQ
        check( X, 42, "C11")
        check( Y, 69, "C12")
  :
  --}}}
  --{{{  C7
  PROC C7 ()
    --{{{  PROC C1
    PROC C1 (VAL INT J)
      PROC C2 ()
        SEQ
          X := J
          check( X, J, "C15")
      :
      PROC C3 ()
        SEQ
          Y := J
          check( Y, J, "C16")
      :
      SEQ
        C2 ()
        check( X, J, "C17")
        C3 ()
        check( Y, J, "C18")
    :
    --}}}
    --{{{  PROC C2
    PROC C2 ()
      SEQ
        X := 69
        Y := 69
        check( X, 69, "C19")
        check( Y, 69, "C20")
    :
    --}}}
    SEQ
      C1 (3)
      check( X, 3, "C21")
      check( Y, 3, "C22")
      C2 ()
      check( X, 69, "C23")
      check( Y, 69, "C24")
  :
  --}}}
  --{{{  C8
  PROC C8 ()
    --{{{  PROC C1
    PROC C1 (VAL INT A, B)
      PROC C1a ()
        SEQ
          check( A, T[1], "C27")
          check( B, INT BT[1], "C28")
      :
      C1a ()
    :
    --}}}
    --{{{  PROC C2
    PROC C2 (VAL INT A, B)
      PROC C1a ()
        SEQ
          check (A, T[1], "C29")
          check (B, INT BT[1], "C30")
      :
      C1a ()
    :
    --}}}
    SEQ
      C1 (T[1], INT BT[1])
      C2 (T[one], INT BT[one])
      check (one, 1, "C30a")
  :
  --}}}
  --{{{  C9
  PROC C9 ()
    --{{{  C1
    PROC C1 (VAL INT A)
      PROC C1Val (VAL INT X, VAL INT Y)
        SEQ
          check( X, T[1], "C31")
          check( Y, INT BT[1], "C32")
      :
      PROC C1Var (INT X)
        SEQ
          check (X, T[1], "C33")
      :
      SEQ
        V[A] := T[A]
        BV[A] := BT[A]
        C1Val (V[A], INT BV[A])
        C1Var (V[A])
    :
    --}}}
    --{{{  C2
    PROC C2 (VAL INT A)
      PROC C1Val (VAL INT X, VAL INT Y)
        SEQ
          check (X, T[one], "C35")
          check (Y, INT BT[one], "C36")
      :
      PROC C1Var (INT X)
        check( X, T[one], "C37")
      :
      SEQ
        BV[A] := BT[A]
        C1Val (V[A], INT BV[A])
        C1Var (V[A])
    :
    --}}}
    SEQ
      C1 (1)
      C2 (1)
  :
  --}}}
  --{{{  C10
  PROC C10 ()
    INT a, b, c, d, x :
    --{{{  P1
    PROC p1 (VAL INT v2, VAL INT p, VAL INT q, VAL []BYTE s)
      check (p, q, s)
    :
    --}}}
    --{{{  P2
    PROC p2 (VAL INT v2, v3, v4, p, q, VAL []BYTE s)
      check (p, q, s)
    :
    --}}}
    --{{{  P3
    PROC p3 (INT v1, v2, v3, v4, VAL INT c1, c2, c3, c4)
      SEQ
        check (v1,c1, "C43")
        check (v2,c2, "C44")
        check (v3,c3, "C45")
        check (v4,c4, "C46")
    :
    --}}}
    SEQ
      a := 5
      b := 15
      c := 20
      d := 25
      x := 25
      check (x,d,"C38")
      check (x,((((d + a) + (b + c)) - c) - c), "C39")
      check (x,(a * 5) / ((d/5)\4),"C40")
      p1 (x,(d-c),((b-a)/2),"C41")
      p2 (x,x,x,((d+(d+c))/7),((d-c)+(c-b)), "C42")
      --p3 (a,b,c,d,(a+a)-a,(b+b)-b,(c+c)-c,(d+d)-d)
      INT aa, bb, cc, dd :
      SEQ
        aa, bb, cc, dd := a, b, c, d
        p3 (aa,bb,cc,dd,(a+a)-a,(b+b)-b,(c+c)-c,(d+d)-d)
  :
  --}}}
  --{{{  C11   - contains the nested procedures
  PROC C11 ()
    INT a :
    --{{{  PROC one
    PROC one (VAL INT x)
      --static link check
      --{{{  PROC two
      PROC two (VAL INT x)
        --{{{  PROC three
        PROC three (VAL INT x)
          --{{{  PROC four
          PROC four (VAL INT x)
            --{{{  PROC five
            PROC five (VAL INT x)
              --{{{  PROC six
              PROC six (VAL INT final)
                SEQ
                  check(final, 6, "C43")
                  check(a, 42, "C44")
              :
              --}}}
              SEQ
                six (x+1)
                check(x, 5, "C45")
                check(a, 42, "C46")
            :
            --}}}
            SEQ
              five (x+1)
              check(x, 4, "C47")
              check(a, 42, "C48")
          :
          --}}}
          SEQ
            four (x+1)
            check(x, 3, "C49")
            check(a, 42, "C50")
        :
        --}}}
        SEQ
          three (x+1)
          check(x, 2, "C51")
          check(a, 42, "C52")
      :
      --}}}
      SEQ
        two (x+1)
        check(x, 1, "C53")
        check(a, 42, "C54")
    :
    --}}}
    SEQ
      a := 42
      one (1)
  :
  --}}}
  --}}}
  INT key :
  SEQ
    init ("CG test 1", "More misc")
    --{{{  static chains
    title ("Static chains")
    --{{{  C1
    X := 0
    C1 ()
    check( X, 42, "C1")
    --}}}
    --{{{  C2
    X := 0
    C2 ()
    check( X, 69, "C2")
    --}}}
    --{{{  C5
    X := 0
    C3 ()
    check( X, 666, "C5")
    --}}}
    --{{{  C8
    X := 0
    C4 (69, X)
    check( 69, X, "C8")
    --}}}
    --{{{  C10
    X := 0
    C5 ()
    check( 42, X, "C10")
    --}}}
    --{{{  C14
    X := 0
    Y := 0
    C6 ()
    check( 42, X, "C13")
    check( 69, Y, "C14")
    --}}}
    --{{{  C26
    X := 0
    Y := 0
    C7 ()
    check( X, 69, "C25")
    check( Y, 69, "C26")
    --}}}
    --}}}
    --{{{  non local vectors
    title ("Non local vectors")
    one := 1
    C8  ()
    C9  ()
    --}}}
    --{{{  bit more complex
    title ("More complex tests")
    C10 ()
    C11 ()
    --}}}
    --{{{  bug 745
    PROC bug.745()
      INT FUNCTION f(VAL INT a0) IS a0 :
      PROC q (VAL INT a0, a1, a2, a3, a4, a5, INT b0, b1, b2, b3, b4, b5)
        b0, b1, b2, b3, b4, b5 := a0, a1, a2, a3, a4, a5
      :
      INT a0, a1, a2, a3, a4, a5, b0, b1, b2, b3, b4, b5 :
      SEQ
        a0, a1, a2, a3, a4, a5 := 100, 101, 102, 103, 104, 105
        q(f(a0), f(a1), f(a2), f(a3), f(a4), f(a5), b0, b1, b2, b3, b4, b5)
        SEQ
          check(b0, 100, "B745a")
          check(b1, 101, "B745b")
          check(b2, 102, "B745c")
          check(b3, 103, "B745d")
          check(b4, 104, "B745e")
          check(b5, 105, "B745f")
    :
    bug.745()
    --}}}
    --{{{  bug 1251
    PROC bug.1251()
      PROC p(VAL []BYTE string, VAL INT x)
        check(x, 99, "B1251a")
      :
      p ("hello there*
         *more string", -- purposely using a continuation line
          99) -- purposely indented less than the asterisk
    :
    bug.1251()
    --}}}
    --{{{  bug 1457
    PROC bug.1457()
      BOOL FUNCTION g(VAL INT b) IS TRUE :
      BOOL bool, b0, b1 :
      SEQ
        b0 := TRUE
        b1 := TRUE
        bool := b0 AND
                 g(77) AND -- this must include a function call
               b1  -- this is purposely indented less than the last line
        check.BOOL(bool, TRUE, "B1457a")
    :
    bug.1457()
    --}}}
    --{{{  bug 1487
    PROC bug.1487()
      INT FUNCTION fracmul(VAL INT x, y) IS x :
      INT FUNCTION refloat(VAL INT x)    IS x :
      INT G :
      INT y :
      SEQ
        G := 88
        -- This is checking an indentation error!
        y := fracmul(fracmul(#33,
                             G),
                 fracmul(#DD, G))
        check(y, #33, "B1487a")
        -- This is checking an indentation error!
        y     := (refloat   (fracmul   (fracmul    (G,
                                        fracmul    (G,
                                        fracmul    (G, #9822) +
                                                       #F5C5) +
                                                       #2270),
                                        fracmul    (G,
                                        fracmul    (G,
                                        fracmul    (G, #EBD3) +
                                                       #5F2E) +
                                                       #98BA) +
                                                       #0000)) *
                 G) + G
        check(y, (88*88)+88, "B1487b")
    :
    bug.1487()
    --}}}
    --{{{  bug 1493
    PROC bug.1493()
      [3]BYTE b :
      SEQ
        SEQ
          SEQ
            b := "abc" -- we need a string literal here!
        VAL str IS "*
          *def*
          *" :
        b := str
        check(INT b[1], INT 'e', "B1493a")
    :
    bug.1493()
    --}}}
    --{{{  boolean expressions
    VAL n IS 32 :
    VAL no.of.inputs IS 3 :
    VAL sequences    IS 1 << no.of.inputs :
    --{{{  result table
    VAL I IS TRUE :
    VAL O IS FALSE :
    VAL [sequences][n]BOOL bool.result.table IS
    --0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1
    [[O,O,O,O,O,O,O,O,O,O,I,O,O,O,I,I,O,O,O,O,O,O,I,I,O,O,O,O,O,I,I,I],  -- O O O
     [O,O,I,O,O,O,I,I,O,O,O,O,O,O,O,O,O,O,I,O,I,I,I,I,O,O,I,I,I,I,I,I],  -- O O I
     [O,O,O,O,O,O,I,I,O,O,I,O,I,I,I,I,O,O,O,O,O,O,O,O,O,O,I,I,O,I,I,I],  -- O I O
     [O,O,I,O,I,I,I,I,O,O,O,O,O,O,I,I,O,O,I,O,O,O,I,I,I,I,I,I,I,I,I,I],  -- O I I
     [O,O,O,O,O,I,I,I,O,O,I,I,I,I,I,I,O,O,I,I,O,I,I,I,O,O,O,O,O,O,O,O],  -- I O O
     [O,O,I,I,I,I,I,I,O,O,O,O,O,I,I,I,I,I,I,I,I,I,I,I,O,O,I,O,O,O,I,I],  -- I O I
     [O,O,I,I,O,I,I,I,I,I,I,I,I,I,I,I,O,O,O,O,O,I,I,I,O,O,O,O,O,O,I,I],  -- I I O
     [I,I,I,I,I,I,I,I,O,O,I,I,O,I,I,I,O,O,I,I,I,I,I,I,O,O,I,O,I,I,I,I]]: -- I I I
    --}}}
    --{{{  evaluate.BOOLs - evaluate lots of different BOOL expressions
    PROC evaluate.BOOLs(VAL BOOL a.in, b.in, c.in, [n]BOOL d)
      BOOL a, b, c :
      --{{{  PROC clobber.locals
      PROC clobber.locals()
        -- this is used to prevent an optimiser from commoning up all
        -- accesses to 'a', 'b', and 'c'.
        -- The idea is that this is complicated enough to stop any
        -- knowledge about the values of a, b, and c being preserved.
        a, b, c := id.BOOL(a), id.BOOL(b), id.BOOL(c)
      :
      --}}}
      SEQ
        a, b, c := id.BOOL(a.in), id.BOOL(b.in), id.BOOL(c.in)
        d[00] := (a AND b) AND c
        clobber.locals()
        d[01] := a AND (b AND c)
        clobber.locals()
        d[02] := (a AND b) OR c
        clobber.locals()
        d[03] := a AND (b OR c)
        clobber.locals()
        d[04] := (a OR b) AND c
        clobber.locals()
        d[05] := a OR (b AND c)
        clobber.locals()
        d[06] := (a OR b) OR c
        clobber.locals()
        d[07] := a OR (b OR c)
        clobber.locals()
        d[08] := (a AND b) AND (NOT c)
        clobber.locals()
        d[09] := a AND (b AND (NOT c))
        clobber.locals()
        d[10] := (a AND b) OR (NOT c)
        clobber.locals()
        d[11] := a AND (b OR (NOT c))
        clobber.locals()
        d[12] := (a OR b) AND (NOT c)
        clobber.locals()
        d[13] := a OR (b AND (NOT c))
        clobber.locals()
        d[14] := (a OR b) OR (NOT c)
        clobber.locals()
        d[15] := a OR (b OR (NOT c))
        clobber.locals()
        d[16] := (a AND (NOT b)) AND c
        clobber.locals()
        d[17] := a AND ((NOT b) AND c)
        clobber.locals()
        d[18] := (a AND (NOT b)) OR c
        clobber.locals()
        d[19] := a AND ((NOT b) OR c)
        clobber.locals()
        d[20] := (a OR (NOT b)) AND c
        clobber.locals()
        d[21] := a OR ((NOT b) AND c)
        clobber.locals()
        d[22] := (a OR (NOT b)) OR c
        clobber.locals()
        d[23] := a OR ((NOT b) OR c)
        clobber.locals()
        d[24] := ((NOT a) AND b) AND c
        clobber.locals()
        d[25] := (NOT a) AND (b AND c)
        clobber.locals()
        d[26] := ((NOT a) AND b) OR c
        clobber.locals()
        d[27] := (NOT a) AND (b OR c)
        clobber.locals()
        d[28] := ((NOT a) OR b) AND c
        clobber.locals()
        d[29] := (NOT a) OR (b AND c)
        clobber.locals()
        d[30] := ((NOT a) OR b) OR c
        clobber.locals()
        d[31] := (NOT a) OR (b OR c)
    :
    --}}}
    PROC test.BOOL()
      [n]BOOL d :
      -- message format is "BOOL-d[nn]-n"
      [12]BYTE msg :
      VAL j.dig IS 8 :
      VAL j.ten IS 7 :
      VAL i.dig IS (SIZE msg) - 1:
      SEQ
        title("BOOL expressions")
        msg := "BOOL-d[nn]-n"
        SEQ i = 0 FOR sequences
          VAL a IS (i /\ #4) <> 0 :
          VAL b IS (i /\ #2) <> 0 :
          VAL c IS (i /\ #1) <> 0 :
          SEQ
            evaluate.BOOLs(a, b, c, d)
            msg[i.dig] := BYTE (i + (INT '0'))
            SEQ j = 0 FOR n
              SEQ
                msg[j.dig] := BYTE ((j \ 10) + (INT '0'))
                msg[j.ten] := BYTE ((j / 10) + (INT '0'))
                check.BOOL(d[j], bool.result.table[i][j], msg)
    :
    test.BOOL()
    --}}}
    finish ()
:
