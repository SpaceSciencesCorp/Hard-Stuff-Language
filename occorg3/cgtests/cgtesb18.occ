-- version control marker $Id: cgtest18.occ,v 1.4 1995/10/10 12:58:06 djb1 Exp $
PROC cgtest18 (CHAN OF BYTE keyb, scr, err)
  --{{{  cgmain.occ
  -- version control marker $Id: cgmain.occ,v 3.9 1997/03/06 16:36:15 dcw Exp $
  --{{{  cglib.occ
  -- version control marker $Id: cglib.occ,v 1.6 1997/01/30 12:31:09 dcw Exp $
  --
  -- Cut-down version of the output utilities from the course library
  --{{{  some constants
  VAL BYTE BELL IS 7(BYTE):
  VAL BYTE NULL IS 0(BYTE):
  VAL BYTE BACK IS 8(BYTE):
  VAL BYTE DELETE IS 127(BYTE):
  --}}}
  --{{{  out stuff
  PROC out.repeat (VAL BYTE ch,  VAL INT n,  CHAN OF BYTE out)
    --{{{
    IF
      n > 0
        SEQ i = 0 FOR n
          SEQ
            out ! ch
      TRUE
        SKIP
    --}}}
  :
  PROC out.ch (VAL BYTE ch,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    SEQ
      out.repeat (' ', field - 1, out)
      out ! ch
    --}}}
  :
  PROC out.ch.funny (VAL BYTE ch,  VAL INT field,  CHAN OF [1]BYTE out)
    --{{{
    SEQ
      VAL [1]BYTE thing RETYPES ch:
      out ! thing
    --}}}
  :
  PROC out.nl (CHAN OF BYTE out)
    SEQ
      out ! '*c'
      out ! '*n'
  :
  PROC in.ch (BYTE ch, CHAN OF BYTE in)
    --{{{
    in ? ch
    --}}}
  :
  PROC out.bell (CHAN OF BYTE out)
    --{{{
    out.ch (BELL, 1, out)
    --}}}
  :
  PROC out.string (VAL []BYTE s,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    VAL length IS SIZE s:
    SEQ
      out.repeat (' ', field - length, out)
      SEQ i = 0 FOR length
        SEQ
          out ! s [i]
    --}}}
  :
  PROC out.number (VAL INT n,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    VAL max.digits IS 20:
    [max.digits]INT D:
    INT x, i:
    IF
      (n = 0)
        --{{{  zero
        SEQ
          IF
            (1 < field)
              out.repeat (' ', field - 1, out)
            (TRUE)
              SKIP
          out ! '0'
        --}}}
      (TRUE)
        SEQ
          i := 0     --  bring this line up here,   Vedat
          --{{{  check negative
          IF
            (n < 0)
              SEQ        -- this one can handle MOSTNEG INT as well
                D [i] := -(n\10)
                x := -(n/10)
                i:= i + 1
            (TRUE)         -- (n > 0)
              x := n
          --}}}
          --{{{  decompose
          -- i := 0   -- this line goes up in order to handle MOSTNEG INT
          WHILE x > 0
            SEQ
              D [i] := x\10
              x := x/10
              i := i + 1
          --}}}
          --{{{  pad
          IF
            (n > 0)
              out.repeat (' ', field - i, out)
            (TRUE)
              SEQ
                out.repeat (' ', (field - 1) - i, out)
                out ! '-'
          --}}}
          --{{{  output
          WHILE i > 0
            SEQ
              i := i - 1
              out ! BYTE (D [i] + (INT '0'))
          --}}}
    --}}}
  :
  PROC out.bool (VAL BOOL b,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    IF
      (b = TRUE)
        out.ch ('1', field, out)
      (b = FALSE)
        out.ch ('0', field, out)
      (TRUE)
        out.ch ('.', field, out)
    --}}}
  :
  PROC out.yes.no (VAL BOOL b,  VAL INT field,  CHAN OF BYTE out)
    --{{{
    IF
      b
        out.string ("yes", field, out)
      TRUE
        out.string ("no", field, out)
    --}}}
  :
  PROC out.hex.int (VAL INT x, l, CHAN OF BYTE out)
    --{{{  body of cg.write.hex.int
    -- this procedure ignores the field length parameter 'l'
    -- independent of endianism - DCW
    VAL INT nibble          IS #F:
    VAL INT hex.dig.per.int IS 8:
    VAL INT bit.per.hex.dig IS 4:
    VAL hex.dig             IS "0123456789ABCDEF":
    INT digit, mask, shift:
    [12]BYTE s:
    SEQ
      s[0]:= '#'
      SEQ i = 1 FOR hex.dig.per.int
        SEQ
          shift :=  (hex.dig.per.int - i) * bit.per.hex.dig
          digit := (x >> shift) /\ nibble
          s[i]:= hex.dig[digit]
      out.string ([s FROM 0 FOR (hex.dig.per.int + 1)], 0, out)
    --}}}
  :
  PROC black.hole (CHAN OF BYTE in)
    --{{{
    WHILE TRUE
      BYTE any:
      in ? any
    --}}}
  :
  --}}}
  --}}}
  VAL display.names  IS TRUE :
  --VAL display.names  IS TRUE :
  --VAL display.titles IS display.names :
  VAL display.titles IS TRUE :
  VAL no.of.columns   IS 6 :
  VAL width.of.column IS 10 :
  TIMER timer:                    -- DCW
  INT start.time, end.time:       -- DCW
  INT column.count :
  --{{{  [INLINE] PROC out (VAL INT ch)
  PROC out (VAL INT ch)
    SEQ
      IF
        (ch >= 0) AND (ch < 256)
          scr ! BYTE ch
        TRUE
          SKIP
  :
  --}}}
  --{{{  PROC newline ()
  PROC newline ()
    SEQ
      out.nl (scr)
      column.count := 0
  :
  --}}}
  --{{{  PROC writes (VAL []BYTE s)
  PROC writes (VAL []BYTE s)
    out.string (s, 0, scr)
  :
  --}}}
  --{{{  [INLINE] PROC in (INT ch)
  PROC in (INT ch)
    --all input goes via this proc, but its only ever used to wait
    SEQ
      --newline ()
      --writes ("(Press any key) ")
      -- keyboard ? ch
      ch := ch  -- stop any warning not used
      newline ()
  :
  --}}}
  --{{{  [INLINE] PROC writen (VAL INT n)
  PROC writen (VAL INT n)
    out.number (n, 0, scr)
  :
  --}}}
  --{{{  [INLINE] PROC writehex (VAL INT value, length)
  PROC writehex (VAL INT value, length)
    --VAL hex IS "0123456789ABCDEF" :
    --SEQ
    --  SEQ i = 1 FOR length
    --    out (INT hex [(value >> ((length - i) * 4)) /\ #F] )
    --  out (-2)
    out.hex.int (value, length, scr)
  :
  --}}}
  --{{{  [INLINE] PROC beep ()
  PROC beep ()
    out (7)
  :
  --}}}
  --{{{  PROC failed.test  (VAL []BYTE where)
  PROC failed.test(VAL []BYTE where)
    SEQ
      beep()
      writes(where)
      IF
        display.names
          newline()
        TRUE
          SKIP
      writes (" Failed: ")
  :
  --}}}
  --{{{  PROC completed.ok (VAL []BYTE where)
  INT error.count, passed.count:
  PROC completed.ok (VAL []BYTE where)
    SEQ
      passed.count := passed.count + 1
      IF
        display.names
          SEQ
            writes (where)
            IF
              column.count < no.of.columns
                VAL spaces IS "            " :
                VAL INT n.spaces IS width.of.column - (SIZE where):
                SEQ
                  IF
                    n.spaces > 0
                      writes([spaces FROM 0 FOR width.of.column - (SIZE where)])
                      --SEQ i = 0 FOR width.of.column - (SIZE where)
                      --  out ('*s' (INT))
                    TRUE
                      out ('*s' (INT))
                  column.count := column.count + 1
              TRUE
                newline ()
        TRUE
          SKIP
  :
  --}}}
  INT any.integer.name :
  VAL []BYTE useless.name RETYPES any.integer.name :
  VAL nibbles.per.INT IS (SIZE useless.name) * 2 :
  --{{{  PROC check.BOOL (VAL BOOL val1, val2, VAL []BYTE test.type)
  PROC check.BOOL (VAL BOOL val1, val2, VAL []BYTE test.type)
    INT key :
    PROC writebool (VAL BOOL b)
      IF
        b
          writes ("TRUE")
        TRUE
          writes ("FALSE")
    :
    SEQ
      IF
        val1 = val2
          completed.ok (test.type)
        TRUE
          SEQ
            failed.test(test.type)
            writebool (val1)
            writes ("  ")
            writebool (val2)
            in (key)
            error.count := error.count + 1
  :
  --}}}
  --{{{  PROC check.BYTE (VAL BYTE val1, val2, VAL []BYTE test.type)
  PROC check.BYTE (VAL BYTE val1, val2, VAL []BYTE test.type)
    INT key :
    SEQ
      IF
        val1 = val2
          completed.ok (test.type)
        TRUE
          SEQ
            failed.test(test.type)
            writehex (INT val1, 2)
            writes ("  ")
            writehex (INT val2, 2)
            in (key)
            error.count := error.count + 1
  :
  --}}}
  --{{{  PROC check.INT (VAL INT val1, val2, VAL []BYTE test.type)
  PROC check.INT (VAL INT val1, val2, VAL []BYTE test.type)
    INT key :
    SEQ
      IF
        val1 = val2
          completed.ok (test.type)
        TRUE
          SEQ
            failed.test(test.type)
            writehex (val1, nibbles.per.INT)
            writes ("  ")
            writehex (val2, nibbles.per.INT)
            writes ("  ")
            writen (val1)
            writes ("  ")
            writen (val2)
            in (key)
            error.count := error.count + 1
  :
  --}}}
  --{{{  PROC check (VAL INT val1, val2, VAL []BYTE test.type)
  --INLINE PROC check (VAL INT val1, val2, VAL []BYTE test.type)
  -- If this is inline, every invocation creates an abbreviation
  -- VAL test.type IS "..." :
  -- and this makes the map file huge!
  PROC check (VAL INT val1, val2, VAL []BYTE test.type)
    check.INT (val1, val2, test.type)
    --{{{  COMMENT
    --IF
      --val1 = val2
        --check.INT (val1, val2, test.type)
      --TRUE
        --out.string ("!!! FAILED in check !!!*n*c", 0, out)
    --}}}
  :
  --}}}
  --{{{  PROC init (VAL []BYTE name, description)
  [20]BYTE saved.name :
  INT saved.name.len :
  PROC init (VAL []BYTE name, description)
    SEQ
      timer ? start.time          -- DCW
      writes (name)
      writes ("  --  ")
      writes (description)
      newline ()
      error.count := 0
      passed.count := 0
      saved.name.len := SIZE name
      [saved.name FROM 0 FOR saved.name.len] := name
  :
  --}}}
  --{{{  PROC title (VAL []BYTE string)
  PROC title (VAL []BYTE string)
    IF
      display.titles
        SEQ
          IF
            display.names
              newline ()
            TRUE
              SKIP
            TRUE
              STOP
          writes(string)
          newline()
      TRUE
        SKIP
      TRUE
        STOP
  :
  --}}}
  --{{{  PROC finish ()
  PROC finish ()
    SEQ
      IF
        display.names
          newline ()
        TRUE
          SKIP
      IF
        error.count > 0
          SEQ
            writes ("^^^ Failed : ")
            writes ([saved.name FROM 0 FOR saved.name.len])
            writes (": ")
            writen (error.count)
            writes (" errors detected, ")
        TRUE
          SEQ
            writes ("^^^ Passed : ")
            writes ([saved.name FROM 0 FOR saved.name.len])
            writes (": All ")
      writen (passed.count)
      writes (" tests passed OK")
      timer ? end.time            -- DCW
      newline ()
      writes ("Time = ")
      writen (end.time - start.time)
      writes (" ticks")
      newline ()
  :
  --}}}
  --{{{  identity functions
  -- These are designed to help stop the optimiser constant propagating.
  -- If it manages to defeat these, make them more complex, as long as they
  -- still return the identity function.
  BOOL   FUNCTION id.BOOL   (VAL BOOL   x)
    BOOL res :
    VALOF
      res := x
      RESULT res
  :
  BYTE   FUNCTION id.BYTE   (VAL BYTE   x)
    BYTE   res :
    VALOF
      res := x
      RESULT res
  :
  INT    FUNCTION id.INT    (VAL INT    x)
    INT    res :
    VALOF
      res := x
      RESULT res
  :
  INT16  FUNCTION id.INT16  (VAL INT16  x)
    INT16  res :
    VALOF
      res := x
      RESULT res
  :
  INT32  FUNCTION id.INT32  (VAL INT32  x)
    INT32  res :
    VALOF
      res := x
      RESULT res
  :
  INT64  FUNCTION id.INT64  (VAL INT64  x)
    INT64  res :
    VALOF
      res := x
      RESULT res
  :
  REAL32 FUNCTION id.REAL32 (VAL REAL32 x)
    REAL32 res :
    VALOF
      res := x
      RESULT res
  :
  REAL64 FUNCTION id.REAL64 (VAL REAL64 x)
    REAL64 res :
    VALOF
      res := x
      RESULT res
  :
  INT    FUNCTION id        (VAL INT    x)
    INT    res :
    VALOF
      res := x
      RESULT res
  :
  --}}}
  --}}}
  SEQ
    init ("CG test 18", "Alias and Usage checks")
    title("Usage checks")
    --{{{  pragmas
    PROC usage.pragmas()
      SEQ
        --{{{  SHARED x       U000 - U009
        INT x :
        #PRAGMA SHARED x
        SEQ
          x := 0
          CHAN OF INT c :
          PAR
            SEQ
              x := 99
              c ! 0
              c ! 0
              check(x, -99, "U001")
            INT any :
            SEQ
              c ? any
              x := -99
              c ? any
        --}}}
        --{{{  SHARED x, y    U010 - U019
        INT x,y :
        #PRAGMA SHARED x,y
        INT yy :
        SEQ
          x,y := 0,0
          CHAN OF INT c :
          PAR
            INT z :
            SEQ
              z := 0
              x := 99
              c ! 0
              z := y
              c ! 0
              y := -1
              c ! 0
              check(x, -99, "U010")
              check(z,  27, "U011")
            INT any :
            SEQ
              y := 27
              c ? any
              x := -99
              yy := y
              c ? any
              c ? any
          check(y,  -1, "U012")
          check(yy, 27, "U013")
        --}}}
        --{{{  SHARED channel U020 - U029
        CHAN OF INT c :
        #PRAGMA SHARED c
        CHAN OF INT d :
        PAR
          SEQ
            c ! 99
            d ! 0
            d ! 0
            c ! 88
          INT any :
          SEQ
            d ? any
            c ! 77
            d ? any
          INT x :
          SEQ
            c ? x
            check(x, 99, "U020")
            c ? x
            check(x, 77, "U021")
            c ? x
            check(x, 88, "U022")
        --}}}
        --{{{  SHARED array   U030 - U039
        [10]INT array :
        #PRAGMA SHARED array
        SEQ
          CHAN OF INT c :
          PAR
            SEQ
              SEQ i = 0 FOR SIZE array
                array[i] := i
              c ! 2
              c ! 2 -- synchronise
              array[2] := 99
              c ! 2
              c ! 2 -- synchronise
            INT i :
            SEQ
              c ? i
              check(array[i],  2, "U030")
              c ? i -- synchronise
              c ? i
              check(array[i], 99, "U031")
              c ? i -- synchronise
        --}}}
    :
    usage.pragmas()
    --}}}
    --{{{  bug 646
    PROC bug.646()
      PROC p ([]CHAN OF INT c)
        PAR i = 0 FOR 5
          c[i] ! i
      :
      PROC q ([5]CHAN OF INT c)
        PAR i = 0 FOR 5
          c[i] ! i
      :
      SEQ pass = 0 FOR 2
        [5]CHAN OF INT d :
        PAR
          CASE pass
            0
              p (d)
            1
              q (d)
          SEQ i = 0 FOR 5
            INT x :
            SEQ
              d[i] ? x
              check(x, i, "B646a")
    :
    bug.646()
    --}}}
    --{{{  bug 1025
    PROC bug.1025()
      [2][2]INT data :
      SEQ
        SEQ i = 0 FOR SIZE data
          SEQ j = 0 FOR SIZE data[0]
            data[i][j] := (i*j) + 99
        [SIZE data][SIZE data[0]] CHAN OF INT c :
        PAR
          PAR i = 0 FOR SIZE data
            SEQ j = 0 FOR SIZE data
              c[i][j] ! (i*j) + 101
          PAR i = 0 FOR SIZE data
            SEQ j = 0 FOR SIZE data
              c[i][j] ? data[i][j]
        SEQ i = 0 FOR SIZE data
          SEQ j = 0 FOR SIZE data[0]
            check(data[i][j], (i*j) + 101, "B1025A")
    :
    bug.1025()
    --}}}
    --{{{  bug 1032
    PROC bug.1032()
      [2][2]INT a:
      INT x, y :
      SEQ
        SEQ i = 0 FOR SIZE a
          SEQ j = 0 FOR SIZE a[0]
            a[i][j] := 99+(i+j)
        x, y := 0, 1
        this IS a[x][0] :
        that IS a[y][0] :
        SEQ
          check(this,  99, "B1032a")
          check(that, 100, "B1032b")
    :
    bug.1032()
    --}}}
    --{{{  bug 1380
    PROC bug.1380()
      PROC p ([]CHAN OF INT c)
        PAR
          c[0] ! 0
          c[1] ! 1
      :
      [2]CHAN OF INT c :
      PAR
        p(c)
        INT x0, x1 :
        SEQ
          c[0] ? x0
          c[1] ? x1
          check(x0, 0, "B1380a")
          check(x1, 1, "B1380b")
    :
    bug.1380()
    --}}}
    title("Alias checks")
    --{{{  pragmas
    PROC alias.pragmas()
      SEQ
        --{{{  VAL        A000 - A009
        [5]INT a :
        SEQ
          SEQ j = 0 FOR SIZE a
            a[j] := j
          INT i :
          SEQ
            i := 0
            WHILE i < (SIZE a)
              VAL x IS a[i] :
              #PRAGMA PERMITALIASES x
              SEQ
                check(x, i, "A000")
                i := i + 1
        --}}}
        --{{{  VAL        A010 - A019
        [5]INT a :
        SEQ
          SEQ j = 0 FOR SIZE a
            a[j] := j
          INT i :
          SEQ
            i := 0
            WHILE i < (SIZE a)
              VAL x IS a[i] :
              #PRAGMA PERMITALIASES x
              SEQ
                check(x, i, "A010")
                a[i] := a[i] + 1
                i := i + 1
          INT i :
          SEQ
            i := 0
            WHILE i < (SIZE a)
              VAL x IS a[i] :
              #PRAGMA PERMITALIASES x
              SEQ
                check(x, i+1, "A011")
                i := i + 1
        --}}}
        --{{{  non-VAL    A020 - A029
        [5]INT a :
        SEQ
          INT i :
          SEQ
            i := 0
            WHILE i < (SIZE a)
              x IS a[i] :
              #PRAGMA PERMITALIASES x
              SEQ
                x := i
                i := i + 1
          INT i :
          SEQ
            i := 0
            WHILE i < (SIZE a)
              x IS a[i] :
              #PRAGMA PERMITALIASES x
              SEQ
                check(x, i, "A020")
                i := i + 1
        --}}}
        --{{{  non-VAL    A030 - A039
        [5]INT a :
        #PRAGMA PERMITALIASES a
        INT i, j :
        SEQ
          SEQ k = 0 FOR SIZE a
            a[k] := k
          i := 3
          j := a[i]
          x IS a[i] :
          SEQ
            check(x,     3, "A030")
            check(a[i],  3, "A031")
            a[j] := 27  -- modify array through a 'clashing' alias
            check(x,    27, "A032")
            check(a[i], 27, "A033")
            x := 99     -- modify array through the abbreviation
            check(x,    99, "A034")
            check(a[i], 99, "A035")
            check(a[j], 99, "A036")
            x := j      -- reset array back to original values
            SEQ k = 0 FOR SIZE a
              check(a[k], k, "A037")
            x := 27     -- make sure copyout is detected
            a[i] := j   -- reset array back to original values
          SEQ k = 0 FOR SIZE a
            check(a[k], k, "A038")
        --}}}
        --{{{  'pointer'  A040 - A049
        PROC local(INT x, y)
          #PRAGMA PERMITALIASES x, y
          SEQ
            x := 99
            y := 101
            check(x, 101, "A040")
        :
        [10]INT a :
        #PRAGMA PERMITALIASES a
        INT i, j :
        SEQ
          i := 8
          j := (i+i) - i
          local(a[i], a[j])
        --}}}
    :
    alias.pragmas()
    --}}}
    --{{{  bug 1563
    PROC bug.1563()
      SEQ
        INT32, INT32 FUNCTION swap.INT32s(VAL INT32 a, b) IS b, a :
        PROC swap.PROC1(INT32 res1, res2, VAL INT32 in1, in2)
          #PRAGMA PERMITALIASES res1, res2, in1, in2
          -- NOTE that in this example, res1 and res2 are aliased with in1, and in2
          -- ON PURPOSE!
          res1, res2 := swap.INT32s(in1, in2)
        :
        INT32 a, b :
        #PRAGMA PERMITALIASES a, b
        SEQ
          a, b := -1(INT32), 0(INT32)
          swap.PROC1(a, b, a, b)
          --ASSERT(a =   0(INT32) )
          --ASSERT(b = (-1(INT32)))
          check(INT a,  0, "B1563aa")
          check(INT b, -1, "B1563ab")
        INT64, INT64 FUNCTION swap.INT64s(VAL INT64 a, b) IS b, a :
        PROC swap.PROC1(INT64 res1, res2, VAL INT64 in1, in2)
          #PRAGMA PERMITALIASES res1, res2, in1, in2
          -- NOTE that in this example, res1 and res2 are aliased with in1, and in2
          -- ON PURPOSE!
          res1, res2 := swap.INT64s(in1, in2)
        :
        INT64 a, b :
        #PRAGMA PERMITALIASES a, b
        SEQ
          a, b := -1(INT64), 0(INT64)
          swap.PROC1(a, b, a, b)
          --ASSERT(a =   0(INT64) )
          --ASSERT(b = (-1(INT64)))
          check(INT a,  0, "B1563ac")
          check(INT b, -1, "B1563ad")
    :
    bug.1563()
    --}}}
    --{{{  bug INSdi02414
    PROC bug.INSdi02414()
      SEQ
        --{{{  basic test, REAL64
        PROC test1 (REAL64 verf, VAL INT32 running.time)
          VAL real.run IS REAL64 ROUND running.time:
          #PRAGMA PERMITALIASES real.run
          verf := real.run
        :
        INT32 running.time :
        REAL64 verf :
        SEQ
          running.time := id.INT32(99(INT32))
          test1(verf, running.time)
          check(INT ROUND verf, 99, "di02414a")
        --}}}
        --{{{  basic test, REAL32
        PROC test1 (REAL32 verf, VAL INT32 running.time)
          VAL real.run IS REAL32 ROUND running.time:
          #PRAGMA PERMITALIASES real.run
          verf := real.run
        :
        INT32 running.time :
        REAL32 verf :
        SEQ
          running.time := id.INT32(99(INT32))
          test1(verf, running.time)
          check(INT ROUND verf, 99, "di02414b")
        --}}}
        --{{{  user test, REAL64
        PROC test1 (REAL64 verf, VAL INT32 running.time)
          REAL64 FUNCTION f(VAL INT32 x) IS REAL64 ROUND (x+1(INT32)) :
          VAL real.run IS f(running.time):
          #PRAGMA PERMITALIASES real.run
          verf := real.run
        :
        INT32 running.time :
        REAL64 verf :
        SEQ
          running.time := id.INT32(99(INT32))
          test1(verf, running.time)
          check(INT ROUND verf, 100, "di02414c")
        --}}}
        --{{{  user test, REAL32
        PROC test1 (REAL32 verf, VAL INT32 running.time)
          REAL32 FUNCTION f(VAL INT32 x) IS REAL32 ROUND (x+1(INT32)) :
          VAL real.run IS f(running.time):
          #PRAGMA PERMITALIASES real.run
          verf := real.run
        :
        INT32 running.time :
        REAL32 verf :
        SEQ
          running.time := id.INT32(99(INT32))
          test1(verf, running.time)
          check(INT ROUND verf, 100, "di02414d")
        --}}}
    :
    bug.INSdi02414()
    --}}}
    finish ()
:
